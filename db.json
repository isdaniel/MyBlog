{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1558927140134},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1558927140132},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1558927140134},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1558927140133},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1558927140134},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1558927140132},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1558927140139},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1558927140139},{"_id":"themes/next/bower.json","hash":"9bc3900396a375f817db47d147bb6d207c661678","modified":1558927140140},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1558927140169},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1558927140139},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1558927140140},{"_id":"source/categories/index.md","hash":"c31f879bac43dba232aa5cf807593dac86aef2b2","modified":1558597332872},{"_id":"source/_posts/hash-encoding.md","hash":"8378b2176fdada4b2ed3ad3a873e62595896c10a","modified":1558611953543},{"_id":"themes/next/_config.yml","hash":"326707083e43f98694575e6fe1ad468c540f7f7a","modified":1558929644928},{"_id":"themes/next/package.json","hash":"0284636ddd0e06ae593f4887819f3a35b08c1370","modified":1558927140250},{"_id":"source/_posts/JsonConvert-SerializeObject.md","hash":"ac46c29e88fbf0016db9a88f16dd63b9d68f2e06","modified":1558927140115},{"_id":"source/_posts/ioc-di.md","hash":"9d2e480734fd4d7441054a407206d1ac203d57bb","modified":1558927140131},{"_id":"source/tags/index.md","hash":"00f39461d567dfd5a8aca88466cd1476551c20ce","modified":1558600615111},{"_id":"source/_posts/cache-asp-net-1.md","hash":"cefdf0ef238e203c2c84315b8e08add9604f0300","modified":1558927140115},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1558927140161},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1558927140161},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1558927140139},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1558927140162},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1558927140161},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1558927140161},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1558927140163},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1558927140162},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1558927140163},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1558927140169},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1558927140169},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1558927140170},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1558927140170},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1558927140162},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1558927140171},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1558927140171},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1558927140171},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1558927140171},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1558927140172},{"_id":"source/_posts/modify-sourcecode.md","hash":"bce5933a5fcc9b8842ca1254fb77a09661a0ac74","modified":1558611962298},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1558927140172},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1558927140172},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1558927140172},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1558927140172},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1558927140172},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1558927140173},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1558927140173},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1558927140173},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1558927140173},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1558927140173},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1558927140234},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1558927140174},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1558927140234},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1558927140249},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1558927140249},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1558927140191},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1558927140251},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1558927140262},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1558927140249},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1558927140249},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1558927140250},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1558927140356},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558927140305},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1558927140163},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1558927140163},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1558927140164},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1558927140164},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1558927140357},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1558927140165},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1558927140166},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1558927140166},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1558927140168},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1558927140167},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1558927140168},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1558927140169},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1558927140190},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558927140190},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558927140190},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1558927140169},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1558927140168},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1558927140193},{"_id":"themes/next/layout/_macro/post.swig","hash":"8a8a2865b09e933c454d9a68e54dd9063dc8c559","modified":1558927140193},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1558927140194},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1558927140194},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1558927140194},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1558927140198},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1558927140199},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1558927140195},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1558927140204},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1558927140204},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1558927140204},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1558927140204},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1558927140206},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1558927140211},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1558927140207},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1558927140211},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1558927140211},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"9be7c2c9cef63006866d1232c5289901e46be7ed","modified":1558927140213},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1558927140214},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1558927140215},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1558927140214},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1558927140357},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1558927140215},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1558927140233},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1558927140215},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1558927140251},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1558927140251},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1558927140251},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1558927140263},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1558927140263},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1558927140263},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1558927140263},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1558927140215},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1558927140264},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1558927140265},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1558927140232},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1558927140265},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1558927140265},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1558927140265},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1558927140266},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1558927140266},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1558927140267},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1558927140305},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558927140306},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558927140306},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558927140306},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1558927140306},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558927140307},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558927140307},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558927140328},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558927140329},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558927140329},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558927140329},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558927140329},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558927140329},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558927140330},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558927140330},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558927140330},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1558927140331},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558927140330},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558927140307},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1558927140331},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1558927140331},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1558927140332},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1558927140332},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1558927140331},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1558927140332},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1558927140331},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1558927140333},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1558927140333},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1558927140333},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558927140292},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558927140293},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558927140303},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558927140304},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558927140294},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1558927140192},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1558927140192},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1558927140195},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1558927140196},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1558927140196},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1558927140196},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1558927140198},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1558927140196},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1558927140197},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1558927140203},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1558927140201},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1558927140197},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1558927140199},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1558927140199},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1558927140201},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1558927140202},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1558927140200},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1558927140202},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1558927140198},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1558927140205},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1558927140205},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1558927140206},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1558927140205},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1558927140206},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1558927140203},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1558927140208},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1558927140209},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1558927140203},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1558927140209},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1558927140209},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1558927140201},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1558927140209},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1558927140210},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1558927140208},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1558927140210},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1558927140210},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1558927140210},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1558927140209},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1558927140209},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1558927140210},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1558927140211},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1558927140212},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1558927140212},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1558927140212},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1558927140213},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1558927140213},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1558927140213},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1558927140214},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1558927140214},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1558927140213},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1558927140233},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1558927140213},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1558927140214},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1558927140233},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1558927140292},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1558927140293},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1558927140233},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1558927140303},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1558927140303},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1558927140292},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1558927140304},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1558927140304},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558927140356},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558927140355},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558927140355},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1558927140294},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1558927140333},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1558927140333},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558927140335},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1558927140269},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1558927140269},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1558927140270},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1558927140270},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1558927140282},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1558927140290},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1558927140291},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1558927140291},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1558927140292},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1558927140291},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1558927140276},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1558927140282},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1558927140295},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1558927140290},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1558927140296},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1558927140295},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1558927140292},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1558927140297},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1558927140296},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1558927140297},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1558927140298},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1558927140298},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1558927140299},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1558927140299},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1558927140270},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1558927140300},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1558927140297},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1558927140296},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1558927140299},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1558927140302},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1558927140301},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1558927140301},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1558927140302},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1558927140302},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558927140354},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1558927140271},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1558927140271},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1558927140271},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1558927140272},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1558927140272},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1558927140273},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1558927140272},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1558927140273},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1558927140274},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1558927140274},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1558927140275},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1558927140274},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1558927140275},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1558927140275},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1558927140271},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1558927140276},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1558927140278},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1558927140273},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1558927140275},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1558927140279},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1558927140278},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1558927140278},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1558927140279},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1558927140279},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1558927140280},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1558927140280},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1558927140280},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1558927140279},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1558927140281},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1558927140281},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1558927140281},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1558927140282},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1558927140284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1558927140282},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1558927140284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1558927140284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1558927140283},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1558927140284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1558927140285},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1558927140285},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1558927140285},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1558927140285},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1558927140286},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1558927140286},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1558927140287},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1558927140287},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1558927140287},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1558927140288},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1558927140287},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1558927140287},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1558927140288},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1558927140289},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1558927140289},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1558927140289},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1558927140288},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1558927140289},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1558927140289},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1558927140290},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1558927140290},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1558927140297},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558927140298},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558927140300},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1558927140289},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1558927140277},{"_id":"public/categories/index.html","hash":"af939a0a1fe948d864997046c5e400ebe157dbbd","modified":1558929409807},{"_id":"public/tags/index.html","hash":"01e99ed42df8a1d442624450adae49c8062757fc","modified":1558929409807},{"_id":"public/archives/index.html","hash":"cfaea80633a39b82e99a20b17f1eee077f323d43","modified":1558929409808},{"_id":"public/archives/2019/index.html","hash":"90ce3e3d1c81ffa01c210e75c5adefabc59296cd","modified":1558929409808},{"_id":"public/archives/2019/05/index.html","hash":"24813f38062724545b40fcf4956548e3c805d299","modified":1558929409808},{"_id":"public/tags/Base64/index.html","hash":"17f7c3785f7c26458c501d5e490df17cc6fcd193","modified":1558929409808},{"_id":"public/tags/AES/index.html","hash":"15db86cd490da6fa87a4bd56d42c8bf7b422d99f","modified":1558929409808},{"_id":"public/tags/SHA256/index.html","hash":"2cb21738c2493b0b9044c98589ca407937c3a3b1","modified":1558929409808},{"_id":"public/tags/Encoding/index.html","hash":"2ac39e416b5a2c985756d3d8cf7c340cfee504c5","modified":1558929409808},{"_id":"public/tags/Hash/index.html","hash":"b74f17c3fa6764ac8fc41ed256c1ddaa20cacefa","modified":1558929409808},{"_id":"public/tags/C/index.html","hash":"547923724b48e262dc42b14575ccd2928ae5d7b5","modified":1558929409808},{"_id":"public/tags/IOC/index.html","hash":"3529dc2c555ca84a2f8139b01048fa1a9d0a7197","modified":1558929409808},{"_id":"public/tags/Autofac/index.html","hash":"7b3d7581cfb2592ec57fd07739252e3208eedc9b","modified":1558929409808},{"_id":"public/tags/Design-Pattern/index.html","hash":"f3263f406448c9a6c538c7c8f1326a5193687713","modified":1558929409808},{"_id":"public/tags/Json-net/index.html","hash":"586aa1a74f64cbc823efff42a39114fb1824ef4b","modified":1558929409808},{"_id":"public/tags/Asp-net/index.html","hash":"5fd4fd3589c479ab6ca8d75aa9b2984bf68c8953","modified":1558929409808},{"_id":"public/tags/cache/index.html","hash":"d71806d895b3c141ace9025a7da46c4a51e74af0","modified":1558929409808},{"_id":"public/tags/Reflection/index.html","hash":"702387201d90a02a7d85b08a23e7fd31986c855c","modified":1558929409808},{"_id":"public/tags/Assembly/index.html","hash":"7061a0429a6313943e188b58171afa6ca89c137c","modified":1558929409809},{"_id":"public/2019/05/27/cache-asp-net-1/index.html","hash":"7fe3cf44cfa9ae44e7011b7179e781ffeb3a8586","modified":1558929409809},{"_id":"public/2019/05/26/JsonConvert-SerializeObject/index.html","hash":"b03df3ab6da9273ecab4c0ca9d8e1e589078cbe7","modified":1558929409809},{"_id":"public/2019/05/26/ioc-di/index.html","hash":"ef32713abe39162c083da15ce3defddc2a573673","modified":1558929409809},{"_id":"public/2019/05/23/modify-sourcecode/index.html","hash":"4e195bc3b41db639a3c06728ce00019778c71a8a","modified":1558929409809},{"_id":"public/2019/05/23/hash-encoding/index.html","hash":"eac0d336f0e8d7fce75d6dad35ab94b309d75495","modified":1558929409809},{"_id":"public/index.html","hash":"ba8d0820358b2049c0d7a5ed7f15d75c07da2edc","modified":1558929409809},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558929409812},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558929409812},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558929409812},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1558929409812},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558929409812},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558929409812},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558929409812},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558929409812},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558929409813},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558929409813},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558929409813},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558929409813},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558929409813},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558929409813},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558929409813},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1558929409813},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558929409813},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558929409813},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1558929410198},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1558929410199},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1558929410199},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1558929410199},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1558929410199},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1558929410199},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1558929410199},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1558929410199},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1558929410199},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1558929410199},{"_id":"public/css/main.css","hash":"44f2365c5c5773e8e33a778ceff4bc1de8595035","modified":1558929410199},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1558929410202},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1558929410202},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558929410203},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558929410207},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558929410207},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558929410285},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558929410306}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2019-05-23T03:02:31.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-05-23 11:02:31\n---\n","updated":"2019-05-23T07:42:12.872Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjw5ubhsd00008cedhzrdoxsn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"標籤","date":"2019-05-20T05:14:20.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: 標籤\ndate: 2019-05-20 13:14:20\ntype: \"tags\"\ncomments: false\n---","updated":"2019-05-23T08:36:55.111Z","path":"tags/index.html","layout":"page","_id":"cjw5ubhsk00028cedos6h5ivo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"淺談-編碼(encoding) vs 加解密 vs 雜湊(Hash)","date":"2019-05-23T11:32:08.000Z","_content":"這一邊有三筆資料\n\n* U2FsdGVkX19FJsgVyam+Gh2EwmGs4BEJjJJsWxCXHWw84gp3uHvozWsHY8gfAx0C\n* VG9kYXkgaXMgYSBnb29kIERheQ==\n* 046a484a529ecfc7693753ee65802b5cfcafd548252d0e5f1bca845ad2208b91\n\n這三個東西看起來都是亂碼，但所代表含意完全不一樣\n\n這邊會跟大家分享這三個東西特性和差異性\n\n此文同步發布 Blog [[淺談] 編碼(encoding) vs 加解密 vs 雜湊(Hash)](https://dotblogs.com.tw/daniel/2019/05/06/223004)\n\n \n# 前言：\n\n會想分享這篇文章是因為蠻多人把\n\n* 編碼(encoding)\n* 加解密\n* 雜湊(Hash) \n\n\n這三個東西搞混，尤其是把編碼當作加密....這是非常危險的事情. \n\n    編碼!= 加密 兩個是完全不一樣的東西\n    編碼!= 加密 兩個是完全不一樣的東西\n    編碼!= 加密 兩個是完全不一樣的東西\n    \n很重要所以要說三次XD! \n\n-----\n\n# 編碼\n## 說明：\n\n這邊用`Base64`編碼來介紹，我們可以看到下圖資料轉換是雙向的．\n\n    Hello Daniel　=>  SGVsbG8gRGFuaWVs\n如果我們想要把`SGVsbG8gRGFuaWVs` 變回 `Hello Daniel` 只需進行`Base64`解碼即可\n\n![](https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557148998_19694.png)\n\n編碼是將原本的資料經過一個運算轉換成另一組資料,如果要還原成原本資料解碼\n\n## 用途：\n在網路傳輸會使用到編碼主要是資料在傳輸時有些特殊字元,有特殊用途(ex:Http 傳參數  &....)\n\n這時就可使用編碼將資料轉換成不會衝突到字串.\n\n \n\n如果想要了解 Base64 原理和演算法的話可以看我另一篇[【深入淺出】Base編碼 (Base64為例子)](https://dotblogs.com.tw/daniel/2019/05/09/001147)\n\n-----\n\n# 加解密\n## 說明：\n\n這邊以`AES`來介紹，我們可以看到下圖資料轉換是雙向，但會透過一個Key來做轉換(這邊是和編碼最大的差別)\n\n\n![](https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557149615_79307.png)\n\n要還原成原始資料我們只能透過一樣的Key才可以達成，就像一個寶相只有唯一一把鑰匙可以打開一樣．\n\n這邊補充一個簡單加密法(凱薩算法)，他是使用字元位移的數字來當作Key\n\n如果位移數量是1 `ABCD => BCDE`\n\n如圖\n\n![](https://upload.wikimedia.org/wikipedia/commons/2/2b/Caesar3.svg)\n\n## 用途：\n加密可以確保資料的安全性（只有相同的Key才可還原成原本資料）很適合用在機密資料且須要還原使用\n\n-----\n\n# 雜湊(Hash) \n## 說明：\n這裡用`Sha256`來當作範例\n\nHash有幾個特點\n\n1. 不管資料量多大經過SHA256運算字串長度都是一樣的\n2. `SHA256`的原因是運算完的資料大小一定是 `256 bit`\n3. 她是一個不可逆的算法所以我們可以看到箭頭是單向.\n4. 相同的值用SHA運算過後值都是一樣的\n\n\n![](https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557152092_14191.png)\n\n一定會有小夥伴好奇,運算完都是固定長度 那會不會出現一個情況,原始資料不一樣但算完`Hash`結果是一樣的\n\n    會 這個我們稱之為雜湊碰撞 這個機率很小\n    \n## 用途：\n一般我們可以把使用者密碼經`Hash`運算存入資料庫中,當作使用唯一識別碼(像指紋)下次使用者登入用運一樣的`Hash`算法 再將值拿來比較辨識使用者合法性.\n\n-----\n\n## 小結：\n對於這邊有一個簡單的比較表格\n\n* 編碼(encoding)\n* 加解密\n* 雜湊(Hash) \n\n\n![https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png](https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png)\n\n加解密和編碼最常被大家誤會搞錯地方是以為使用`Base64`編碼就很安全(但有心人事取得你的資料只要知道你使用編碼就可以還原成原始資料)\n\n如果要確保資料隱密性時可以使用加解密而不是編碼\n\n所以別再把`Base64`編碼當作加密工具來使用.\n\n這是很危險低","source":"_posts/hash-encoding.md","raw":"---\ntitle: 淺談-編碼(encoding) vs 加解密 vs 雜湊(Hash)\ndate: 2019-05-23 19:32:08\ntags: [Base64,AES,SHA256,Encoding,Hash]\n---\n這一邊有三筆資料\n\n* U2FsdGVkX19FJsgVyam+Gh2EwmGs4BEJjJJsWxCXHWw84gp3uHvozWsHY8gfAx0C\n* VG9kYXkgaXMgYSBnb29kIERheQ==\n* 046a484a529ecfc7693753ee65802b5cfcafd548252d0e5f1bca845ad2208b91\n\n這三個東西看起來都是亂碼，但所代表含意完全不一樣\n\n這邊會跟大家分享這三個東西特性和差異性\n\n此文同步發布 Blog [[淺談] 編碼(encoding) vs 加解密 vs 雜湊(Hash)](https://dotblogs.com.tw/daniel/2019/05/06/223004)\n\n \n# 前言：\n\n會想分享這篇文章是因為蠻多人把\n\n* 編碼(encoding)\n* 加解密\n* 雜湊(Hash) \n\n\n這三個東西搞混，尤其是把編碼當作加密....這是非常危險的事情. \n\n    編碼!= 加密 兩個是完全不一樣的東西\n    編碼!= 加密 兩個是完全不一樣的東西\n    編碼!= 加密 兩個是完全不一樣的東西\n    \n很重要所以要說三次XD! \n\n-----\n\n# 編碼\n## 說明：\n\n這邊用`Base64`編碼來介紹，我們可以看到下圖資料轉換是雙向的．\n\n    Hello Daniel　=>  SGVsbG8gRGFuaWVs\n如果我們想要把`SGVsbG8gRGFuaWVs` 變回 `Hello Daniel` 只需進行`Base64`解碼即可\n\n![](https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557148998_19694.png)\n\n編碼是將原本的資料經過一個運算轉換成另一組資料,如果要還原成原本資料解碼\n\n## 用途：\n在網路傳輸會使用到編碼主要是資料在傳輸時有些特殊字元,有特殊用途(ex:Http 傳參數  &....)\n\n這時就可使用編碼將資料轉換成不會衝突到字串.\n\n \n\n如果想要了解 Base64 原理和演算法的話可以看我另一篇[【深入淺出】Base編碼 (Base64為例子)](https://dotblogs.com.tw/daniel/2019/05/09/001147)\n\n-----\n\n# 加解密\n## 說明：\n\n這邊以`AES`來介紹，我們可以看到下圖資料轉換是雙向，但會透過一個Key來做轉換(這邊是和編碼最大的差別)\n\n\n![](https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557149615_79307.png)\n\n要還原成原始資料我們只能透過一樣的Key才可以達成，就像一個寶相只有唯一一把鑰匙可以打開一樣．\n\n這邊補充一個簡單加密法(凱薩算法)，他是使用字元位移的數字來當作Key\n\n如果位移數量是1 `ABCD => BCDE`\n\n如圖\n\n![](https://upload.wikimedia.org/wikipedia/commons/2/2b/Caesar3.svg)\n\n## 用途：\n加密可以確保資料的安全性（只有相同的Key才可還原成原本資料）很適合用在機密資料且須要還原使用\n\n-----\n\n# 雜湊(Hash) \n## 說明：\n這裡用`Sha256`來當作範例\n\nHash有幾個特點\n\n1. 不管資料量多大經過SHA256運算字串長度都是一樣的\n2. `SHA256`的原因是運算完的資料大小一定是 `256 bit`\n3. 她是一個不可逆的算法所以我們可以看到箭頭是單向.\n4. 相同的值用SHA運算過後值都是一樣的\n\n\n![](https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557152092_14191.png)\n\n一定會有小夥伴好奇,運算完都是固定長度 那會不會出現一個情況,原始資料不一樣但算完`Hash`結果是一樣的\n\n    會 這個我們稱之為雜湊碰撞 這個機率很小\n    \n## 用途：\n一般我們可以把使用者密碼經`Hash`運算存入資料庫中,當作使用唯一識別碼(像指紋)下次使用者登入用運一樣的`Hash`算法 再將值拿來比較辨識使用者合法性.\n\n-----\n\n## 小結：\n對於這邊有一個簡單的比較表格\n\n* 編碼(encoding)\n* 加解密\n* 雜湊(Hash) \n\n\n![https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png](https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png)\n\n加解密和編碼最常被大家誤會搞錯地方是以為使用`Base64`編碼就很安全(但有心人事取得你的資料只要知道你使用編碼就可以還原成原始資料)\n\n如果要確保資料隱密性時可以使用加解密而不是編碼\n\n所以別再把`Base64`編碼當作加密工具來使用.\n\n這是很危險低","slug":"hash-encoding","published":1,"updated":"2019-05-23T11:45:53.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5ubhsg00018ced3iu2hxuj","content":"<p>這一邊有三筆資料</p>\n<ul>\n<li>U2FsdGVkX19FJsgVyam+Gh2EwmGs4BEJjJJsWxCXHWw84gp3uHvozWsHY8gfAx0C</li>\n<li>VG9kYXkgaXMgYSBnb29kIERheQ==</li>\n<li>046a484a529ecfc7693753ee65802b5cfcafd548252d0e5f1bca845ad2208b91</li>\n</ul>\n<p>這三個東西看起來都是亂碼，但所代表含意完全不一樣</p>\n<p>這邊會跟大家分享這三個東西特性和差異性</p>\n<p>此文同步發布 Blog <a href=\"https://dotblogs.com.tw/daniel/2019/05/06/223004\" target=\"_blank\" rel=\"noopener\">[淺談] 編碼(encoding) vs 加解密 vs 雜湊(Hash)</a></p>\n<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h1><p>會想分享這篇文章是因為蠻多人把</p>\n<ul>\n<li>編碼(encoding)</li>\n<li>加解密</li>\n<li>雜湊(Hash) </li>\n</ul>\n<p>這三個東西搞混，尤其是把編碼當作加密….這是非常危險的事情. </p>\n<pre><code>編碼!= 加密 兩個是完全不一樣的東西\n編碼!= 加密 兩個是完全不一樣的東西\n編碼!= 加密 兩個是完全不一樣的東西\n</code></pre><p>很重要所以要說三次XD! </p>\n<hr>\n<h1 id=\"編碼\"><a href=\"#編碼\" class=\"headerlink\" title=\"編碼\"></a>編碼</h1><h2 id=\"說明：\"><a href=\"#說明：\" class=\"headerlink\" title=\"說明：\"></a>說明：</h2><p>這邊用<code>Base64</code>編碼來介紹，我們可以看到下圖資料轉換是雙向的．</p>\n<pre><code>Hello Daniel　=&gt;  SGVsbG8gRGFuaWVs\n</code></pre><p>如果我們想要把<code>SGVsbG8gRGFuaWVs</code> 變回 <code>Hello Daniel</code> 只需進行<code>Base64</code>解碼即可</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557148998_19694.png\" alt></p>\n<p>編碼是將原本的資料經過一個運算轉換成另一組資料,如果要還原成原本資料解碼</p>\n<h2 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a>用途：</h2><p>在網路傳輸會使用到編碼主要是資料在傳輸時有些特殊字元,有特殊用途(ex:Http 傳參數  &amp;….)</p>\n<p>這時就可使用編碼將資料轉換成不會衝突到字串.</p>\n<p>如果想要了解 Base64 原理和演算法的話可以看我另一篇<a href=\"https://dotblogs.com.tw/daniel/2019/05/09/001147\" target=\"_blank\" rel=\"noopener\">【深入淺出】Base編碼 (Base64為例子)</a></p>\n<hr>\n<h1 id=\"加解密\"><a href=\"#加解密\" class=\"headerlink\" title=\"加解密\"></a>加解密</h1><h2 id=\"說明：-1\"><a href=\"#說明：-1\" class=\"headerlink\" title=\"說明：\"></a>說明：</h2><p>這邊以<code>AES</code>來介紹，我們可以看到下圖資料轉換是雙向，但會透過一個Key來做轉換(這邊是和編碼最大的差別)</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557149615_79307.png\" alt></p>\n<p>要還原成原始資料我們只能透過一樣的Key才可以達成，就像一個寶相只有唯一一把鑰匙可以打開一樣．</p>\n<p>這邊補充一個簡單加密法(凱薩算法)，他是使用字元位移的數字來當作Key</p>\n<p>如果位移數量是1 <code>ABCD =&gt; BCDE</code></p>\n<p>如圖</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2b/Caesar3.svg\" alt></p>\n<h2 id=\"用途：-1\"><a href=\"#用途：-1\" class=\"headerlink\" title=\"用途：\"></a>用途：</h2><p>加密可以確保資料的安全性（只有相同的Key才可還原成原本資料）很適合用在機密資料且須要還原使用</p>\n<hr>\n<h1 id=\"雜湊-Hash\"><a href=\"#雜湊-Hash\" class=\"headerlink\" title=\"雜湊(Hash)\"></a>雜湊(Hash)</h1><h2 id=\"說明：-2\"><a href=\"#說明：-2\" class=\"headerlink\" title=\"說明：\"></a>說明：</h2><p>這裡用<code>Sha256</code>來當作範例</p>\n<p>Hash有幾個特點</p>\n<ol>\n<li>不管資料量多大經過SHA256運算字串長度都是一樣的</li>\n<li><code>SHA256</code>的原因是運算完的資料大小一定是 <code>256 bit</code></li>\n<li>她是一個不可逆的算法所以我們可以看到箭頭是單向.</li>\n<li>相同的值用SHA運算過後值都是一樣的</li>\n</ol>\n<p><img src=\"https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557152092_14191.png\" alt></p>\n<p>一定會有小夥伴好奇,運算完都是固定長度 那會不會出現一個情況,原始資料不一樣但算完<code>Hash</code>結果是一樣的</p>\n<pre><code>會 這個我們稱之為雜湊碰撞 這個機率很小\n</code></pre><h2 id=\"用途：-2\"><a href=\"#用途：-2\" class=\"headerlink\" title=\"用途：\"></a>用途：</h2><p>一般我們可以把使用者密碼經<code>Hash</code>運算存入資料庫中,當作使用唯一識別碼(像指紋)下次使用者登入用運一樣的<code>Hash</code>算法 再將值拿來比較辨識使用者合法性.</p>\n<hr>\n<h2 id=\"小結：\"><a href=\"#小結：\" class=\"headerlink\" title=\"小結：\"></a>小結：</h2><p>對於這邊有一個簡單的比較表格</p>\n<ul>\n<li>編碼(encoding)</li>\n<li>加解密</li>\n<li>雜湊(Hash) </li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png\"></p>\n<p>加解密和編碼最常被大家誤會搞錯地方是以為使用<code>Base64</code>編碼就很安全(但有心人事取得你的資料只要知道你使用編碼就可以還原成原始資料)</p>\n<p>如果要確保資料隱密性時可以使用加解密而不是編碼</p>\n<p>所以別再把<code>Base64</code>編碼當作加密工具來使用.</p>\n<p>這是很危險低</p>\n","site":{"data":{}},"excerpt":"","more":"<p>這一邊有三筆資料</p>\n<ul>\n<li>U2FsdGVkX19FJsgVyam+Gh2EwmGs4BEJjJJsWxCXHWw84gp3uHvozWsHY8gfAx0C</li>\n<li>VG9kYXkgaXMgYSBnb29kIERheQ==</li>\n<li>046a484a529ecfc7693753ee65802b5cfcafd548252d0e5f1bca845ad2208b91</li>\n</ul>\n<p>這三個東西看起來都是亂碼，但所代表含意完全不一樣</p>\n<p>這邊會跟大家分享這三個東西特性和差異性</p>\n<p>此文同步發布 Blog <a href=\"https://dotblogs.com.tw/daniel/2019/05/06/223004\" target=\"_blank\" rel=\"noopener\">[淺談] 編碼(encoding) vs 加解密 vs 雜湊(Hash)</a></p>\n<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h1><p>會想分享這篇文章是因為蠻多人把</p>\n<ul>\n<li>編碼(encoding)</li>\n<li>加解密</li>\n<li>雜湊(Hash) </li>\n</ul>\n<p>這三個東西搞混，尤其是把編碼當作加密….這是非常危險的事情. </p>\n<pre><code>編碼!= 加密 兩個是完全不一樣的東西\n編碼!= 加密 兩個是完全不一樣的東西\n編碼!= 加密 兩個是完全不一樣的東西\n</code></pre><p>很重要所以要說三次XD! </p>\n<hr>\n<h1 id=\"編碼\"><a href=\"#編碼\" class=\"headerlink\" title=\"編碼\"></a>編碼</h1><h2 id=\"說明：\"><a href=\"#說明：\" class=\"headerlink\" title=\"說明：\"></a>說明：</h2><p>這邊用<code>Base64</code>編碼來介紹，我們可以看到下圖資料轉換是雙向的．</p>\n<pre><code>Hello Daniel　=&gt;  SGVsbG8gRGFuaWVs\n</code></pre><p>如果我們想要把<code>SGVsbG8gRGFuaWVs</code> 變回 <code>Hello Daniel</code> 只需進行<code>Base64</code>解碼即可</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557148998_19694.png\" alt></p>\n<p>編碼是將原本的資料經過一個運算轉換成另一組資料,如果要還原成原本資料解碼</p>\n<h2 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a>用途：</h2><p>在網路傳輸會使用到編碼主要是資料在傳輸時有些特殊字元,有特殊用途(ex:Http 傳參數  &amp;….)</p>\n<p>這時就可使用編碼將資料轉換成不會衝突到字串.</p>\n<p>如果想要了解 Base64 原理和演算法的話可以看我另一篇<a href=\"https://dotblogs.com.tw/daniel/2019/05/09/001147\" target=\"_blank\" rel=\"noopener\">【深入淺出】Base編碼 (Base64為例子)</a></p>\n<hr>\n<h1 id=\"加解密\"><a href=\"#加解密\" class=\"headerlink\" title=\"加解密\"></a>加解密</h1><h2 id=\"說明：-1\"><a href=\"#說明：-1\" class=\"headerlink\" title=\"說明：\"></a>說明：</h2><p>這邊以<code>AES</code>來介紹，我們可以看到下圖資料轉換是雙向，但會透過一個Key來做轉換(這邊是和編碼最大的差別)</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557149615_79307.png\" alt></p>\n<p>要還原成原始資料我們只能透過一樣的Key才可以達成，就像一個寶相只有唯一一把鑰匙可以打開一樣．</p>\n<p>這邊補充一個簡單加密法(凱薩算法)，他是使用字元位移的數字來當作Key</p>\n<p>如果位移數量是1 <code>ABCD =&gt; BCDE</code></p>\n<p>如圖</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2b/Caesar3.svg\" alt></p>\n<h2 id=\"用途：-1\"><a href=\"#用途：-1\" class=\"headerlink\" title=\"用途：\"></a>用途：</h2><p>加密可以確保資料的安全性（只有相同的Key才可還原成原本資料）很適合用在機密資料且須要還原使用</p>\n<hr>\n<h1 id=\"雜湊-Hash\"><a href=\"#雜湊-Hash\" class=\"headerlink\" title=\"雜湊(Hash)\"></a>雜湊(Hash)</h1><h2 id=\"說明：-2\"><a href=\"#說明：-2\" class=\"headerlink\" title=\"說明：\"></a>說明：</h2><p>這裡用<code>Sha256</code>來當作範例</p>\n<p>Hash有幾個特點</p>\n<ol>\n<li>不管資料量多大經過SHA256運算字串長度都是一樣的</li>\n<li><code>SHA256</code>的原因是運算完的資料大小一定是 <code>256 bit</code></li>\n<li>她是一個不可逆的算法所以我們可以看到箭頭是單向.</li>\n<li>相同的值用SHA運算過後值都是一樣的</li>\n</ol>\n<p><img src=\"https://az787680.vo.msecnd.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557152092_14191.png\" alt></p>\n<p>一定會有小夥伴好奇,運算完都是固定長度 那會不會出現一個情況,原始資料不一樣但算完<code>Hash</code>結果是一樣的</p>\n<pre><code>會 這個我們稱之為雜湊碰撞 這個機率很小\n</code></pre><h2 id=\"用途：-2\"><a href=\"#用途：-2\" class=\"headerlink\" title=\"用途：\"></a>用途：</h2><p>一般我們可以把使用者密碼經<code>Hash</code>運算存入資料庫中,當作使用唯一識別碼(像指紋)下次使用者登入用運一樣的<code>Hash</code>算法 再將值拿來比較辨識使用者合法性.</p>\n<hr>\n<h2 id=\"小結：\"><a href=\"#小結：\" class=\"headerlink\" title=\"小結：\"></a>小結：</h2><p>對於這邊有一個簡單的比較表格</p>\n<ul>\n<li>編碼(encoding)</li>\n<li>加解密</li>\n<li>雜湊(Hash) </li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png\"></p>\n<p>加解密和編碼最常被大家誤會搞錯地方是以為使用<code>Base64</code>編碼就很安全(但有心人事取得你的資料只要知道你使用編碼就可以還原成原始資料)</p>\n<p>如果要確保資料隱密性時可以使用加解密而不是編碼</p>\n<p>所以別再把<code>Base64</code>編碼當作加密工具來使用.</p>\n<p>這是很危險低</p>\n"},{"title":"IOC(控制反轉)，DI(依賴注入) 深入淺出~~","date":"2019-05-26T14:31:09.000Z","_content":"\n`IOC`是一個oop重要的程式設計思想。\n\n學一個技術或思想前我們先了解，這個技術或思想為我們解決怎樣問題。\n\n`Ioc—Inversion of Control` 控制反轉\n控制反轉是一個設計思想 ，把對於某個物件的控制權移轉給第三方容器\n\n## 簡單解釋\n\nA物件程式內部需要使用B物件 A,B物件中有依賴的成份\n\n控制反轉是把原本A對B控制權移交給第三方容器\n\n降低A對B物件的耦合性，讓雙方都倚賴第三方容器。\n\n* 反轉概念如下圖\n\n![pic](https://az787680.vo.msecnd.net/user/九桃/493ce9d9-64bd-4343-a145-16ab21f3c695/1555312814_72597.png)\n\n>我們可發現有兩點差異\n\n1. 使用者原本直接耦合於A，但使用IoC容器使用者就直接對容器而不是A 至於A關連於誰由容器決定\n原本A直接控制於B,C，但透過一個IoC容器我們控制權反轉給了容器\n\n2. IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”\n系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。\nDI—Dependency Injection 依賴注入\n\n>把被依賴物件注入被動接收物件中\n\n## 案例解釋：\n\n小明是個愛乾淨的人，但他工作時常加班導致\n\n學一個技術或思想前我們必須先了解，這個技術或思想可為我們解決什麼問題。\n\n`Ioc(Inversion of Control)`控制反轉\n\n**控制反轉是一個設計思想**\n\n簡單解釋\n\nA物件程式內部需要使用B物件 A,B物件中有依賴的成份\n\n控制反轉把原本A對B直接控制權移交給由第三方容器\n\n降低A對B物件的耦合程度，並讓雙方都倚賴抽象。\n\n> IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”\n \n>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。\n\n-----\n\nDI—Dependency Injection 依賴注入\n \n把**被依賴物件**注入**被動接收物件**中\n\n案例解釋：\n\n小明是個愛乾淨的人，但他工作時常加班導致房間雜亂，他不能忍受此狀況，所以小明去找一個清潔阿姨每天幫忙他打掃家裡\n\n哪天阿姨哪天有事不能打掃，小明就必須要再去找人來幫忙打掃，由此可知小明耦合阿姨\n\n-----\n\n如果今天是....\n\n小明把他要的條件給「打掃仲介公司」，仲介公司幫他尋找有沒有符合小明需求的打掃阿姨，假如今天A阿姨請假了，仲介公司會自動找另一個符合需求B阿姨幫忙打掃...\n\n \n\n原本小明需耦合於打掃阿姨，現在被「仲介公司」做了控制反轉讓「仲介公司」來提供打掃阿姨。\n\n小明不用管是否今天有人會來打掃，「仲介公司」會幫小明找到一個掃地阿姨。\n\n \n* 「仲介公司」可看作 依賴注入容器\n* 「小明」可看作 被動接收物件\n\n「打掃阿姨」可看作 被依賴物件\n\n在使用IOC容器前需先了解雙方的依賴關係(誰依賴誰?)\n\n上述還有一個很重要的觀念是，依賴和被接收對象要倚賴抽象。\n\n-----\n\n範例使用：VS2015\n\nIOC容器：AutoFac\n\n下面範例來說明上面的例子\n\n \n小明自己依賴於掃地阿姨\n依賴程式碼寫在小明類別內部日後要更改只能動內部程式碼。\n\n```c#\n/// <summary>\n/// 小明直接依賴 Aunt 不是依賴抽象\n/// 日後要改必須動內部\n/// </summary>\npublic class Mine\n{\n    public Aunt aunt = new Aunt();\n\n    public void Room()\n    {\n        aunt.Swapping();\n    }\n}\n```\n\n呼叫使用時\n\n```c#\nMine mine = new Mine();\nmine.Room();\n```\n\n小明找仲介公司\n \n\n**仲介公司(Ioc容器)**\n\n在仲介公司內註冊需求，讓仲介公司日後幫你找人（註冊的類別）\n\n```c#\n/// <summary>\n/// 仲介公司\n/// </summary>\n/// <returns></returns>\nprivate static IContainer MiddleCompany()\n{\n    ContainerBuilder builder = new ContainerBuilder();\n\n    //在仲介公司裡寫需求人申請單\n    builder.RegisterType<MineWithMiddle>();\n    //小明所需打掃阿姨需求\n    builder.RegisterType<Aunt>().As<ISwapable>();\n\n    return builder.Build();\n}\n```\n\n使用起來\n\n```c#\nIContainer middleCompany = MiddleCompany();\n//仲介公司(IOC AutoFac)自動幫小明注入一個打掃阿姨\nMineWithMiddle mineWithMiddle = middleCompany.Resolve<MineWithMiddle>();\n\nmineWithMiddle.Room();\n```\n\n總結：\n\n雖然上面程式碼執行結果一樣，但內部結構和日後擴展性卻截然不同\n\n> 重點：系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。\n\n像網頁瀏覽器和伺服器是依賴**Http**協議，用戶端不管是手機.電腦,平板，伺服器端php,asp.net,java都可互相交信，依賴**Http**協議共用的合約\n\n[範例原始碼](https://github.com/isdaniel/IOC_Sample)\n\n[參考連結](http://www.cnblogs.com/xdp-gacl/p/4249939.html)\n","source":"_posts/ioc-di.md","raw":"---\ntitle: IOC(控制反轉)，DI(依賴注入) 深入淺出~~\ndate: 2019-05-26 22:31:09\ntags: [C#,IOC,Autofac,Design-Pattern]\n---\n\n`IOC`是一個oop重要的程式設計思想。\n\n學一個技術或思想前我們先了解，這個技術或思想為我們解決怎樣問題。\n\n`Ioc—Inversion of Control` 控制反轉\n控制反轉是一個設計思想 ，把對於某個物件的控制權移轉給第三方容器\n\n## 簡單解釋\n\nA物件程式內部需要使用B物件 A,B物件中有依賴的成份\n\n控制反轉是把原本A對B控制權移交給第三方容器\n\n降低A對B物件的耦合性，讓雙方都倚賴第三方容器。\n\n* 反轉概念如下圖\n\n![pic](https://az787680.vo.msecnd.net/user/九桃/493ce9d9-64bd-4343-a145-16ab21f3c695/1555312814_72597.png)\n\n>我們可發現有兩點差異\n\n1. 使用者原本直接耦合於A，但使用IoC容器使用者就直接對容器而不是A 至於A關連於誰由容器決定\n原本A直接控制於B,C，但透過一個IoC容器我們控制權反轉給了容器\n\n2. IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”\n系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。\nDI—Dependency Injection 依賴注入\n\n>把被依賴物件注入被動接收物件中\n\n## 案例解釋：\n\n小明是個愛乾淨的人，但他工作時常加班導致\n\n學一個技術或思想前我們必須先了解，這個技術或思想可為我們解決什麼問題。\n\n`Ioc(Inversion of Control)`控制反轉\n\n**控制反轉是一個設計思想**\n\n簡單解釋\n\nA物件程式內部需要使用B物件 A,B物件中有依賴的成份\n\n控制反轉把原本A對B直接控制權移交給由第三方容器\n\n降低A對B物件的耦合程度，並讓雙方都倚賴抽象。\n\n> IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”\n \n>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。\n\n-----\n\nDI—Dependency Injection 依賴注入\n \n把**被依賴物件**注入**被動接收物件**中\n\n案例解釋：\n\n小明是個愛乾淨的人，但他工作時常加班導致房間雜亂，他不能忍受此狀況，所以小明去找一個清潔阿姨每天幫忙他打掃家裡\n\n哪天阿姨哪天有事不能打掃，小明就必須要再去找人來幫忙打掃，由此可知小明耦合阿姨\n\n-----\n\n如果今天是....\n\n小明把他要的條件給「打掃仲介公司」，仲介公司幫他尋找有沒有符合小明需求的打掃阿姨，假如今天A阿姨請假了，仲介公司會自動找另一個符合需求B阿姨幫忙打掃...\n\n \n\n原本小明需耦合於打掃阿姨，現在被「仲介公司」做了控制反轉讓「仲介公司」來提供打掃阿姨。\n\n小明不用管是否今天有人會來打掃，「仲介公司」會幫小明找到一個掃地阿姨。\n\n \n* 「仲介公司」可看作 依賴注入容器\n* 「小明」可看作 被動接收物件\n\n「打掃阿姨」可看作 被依賴物件\n\n在使用IOC容器前需先了解雙方的依賴關係(誰依賴誰?)\n\n上述還有一個很重要的觀念是，依賴和被接收對象要倚賴抽象。\n\n-----\n\n範例使用：VS2015\n\nIOC容器：AutoFac\n\n下面範例來說明上面的例子\n\n \n小明自己依賴於掃地阿姨\n依賴程式碼寫在小明類別內部日後要更改只能動內部程式碼。\n\n```c#\n/// <summary>\n/// 小明直接依賴 Aunt 不是依賴抽象\n/// 日後要改必須動內部\n/// </summary>\npublic class Mine\n{\n    public Aunt aunt = new Aunt();\n\n    public void Room()\n    {\n        aunt.Swapping();\n    }\n}\n```\n\n呼叫使用時\n\n```c#\nMine mine = new Mine();\nmine.Room();\n```\n\n小明找仲介公司\n \n\n**仲介公司(Ioc容器)**\n\n在仲介公司內註冊需求，讓仲介公司日後幫你找人（註冊的類別）\n\n```c#\n/// <summary>\n/// 仲介公司\n/// </summary>\n/// <returns></returns>\nprivate static IContainer MiddleCompany()\n{\n    ContainerBuilder builder = new ContainerBuilder();\n\n    //在仲介公司裡寫需求人申請單\n    builder.RegisterType<MineWithMiddle>();\n    //小明所需打掃阿姨需求\n    builder.RegisterType<Aunt>().As<ISwapable>();\n\n    return builder.Build();\n}\n```\n\n使用起來\n\n```c#\nIContainer middleCompany = MiddleCompany();\n//仲介公司(IOC AutoFac)自動幫小明注入一個打掃阿姨\nMineWithMiddle mineWithMiddle = middleCompany.Resolve<MineWithMiddle>();\n\nmineWithMiddle.Room();\n```\n\n總結：\n\n雖然上面程式碼執行結果一樣，但內部結構和日後擴展性卻截然不同\n\n> 重點：系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。\n\n像網頁瀏覽器和伺服器是依賴**Http**協議，用戶端不管是手機.電腦,平板，伺服器端php,asp.net,java都可互相交信，依賴**Http**協議共用的合約\n\n[範例原始碼](https://github.com/isdaniel/IOC_Sample)\n\n[參考連結](http://www.cnblogs.com/xdp-gacl/p/4249939.html)\n","slug":"ioc-di","published":1,"updated":"2019-05-27T03:19:00.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5ubhsl00038ced3w7xtxua","content":"<p><code>IOC</code>是一個oop重要的程式設計思想。</p>\n<p>學一個技術或思想前我們先了解，這個技術或思想為我們解決怎樣問題。</p>\n<p><code>Ioc—Inversion of Control</code> 控制反轉<br>控制反轉是一個設計思想 ，把對於某個物件的控制權移轉給第三方容器</p>\n<h2 id=\"簡單解釋\"><a href=\"#簡單解釋\" class=\"headerlink\" title=\"簡單解釋\"></a>簡單解釋</h2><p>A物件程式內部需要使用B物件 A,B物件中有依賴的成份</p>\n<p>控制反轉是把原本A對B控制權移交給第三方容器</p>\n<p>降低A對B物件的耦合性，讓雙方都倚賴第三方容器。</p>\n<ul>\n<li>反轉概念如下圖</li>\n</ul>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/493ce9d9-64bd-4343-a145-16ab21f3c695/1555312814_72597.png\" alt=\"pic\"></p>\n<blockquote>\n<p>我們可發現有兩點差異</p>\n</blockquote>\n<ol>\n<li><p>使用者原本直接耦合於A，但使用IoC容器使用者就直接對容器而不是A 至於A關連於誰由容器決定<br>原本A直接控制於B,C，但透過一個IoC容器我們控制權反轉給了容器</p>\n</li>\n<li><p>IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”<br>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。<br>DI—Dependency Injection 依賴注入</p>\n</li>\n</ol>\n<blockquote>\n<p>把被依賴物件注入被動接收物件中</p>\n</blockquote>\n<h2 id=\"案例解釋：\"><a href=\"#案例解釋：\" class=\"headerlink\" title=\"案例解釋：\"></a>案例解釋：</h2><p>小明是個愛乾淨的人，但他工作時常加班導致</p>\n<p>學一個技術或思想前我們必須先了解，這個技術或思想可為我們解決什麼問題。</p>\n<p><code>Ioc(Inversion of Control)</code>控制反轉</p>\n<p><strong>控制反轉是一個設計思想</strong></p>\n<p>簡單解釋</p>\n<p>A物件程式內部需要使用B物件 A,B物件中有依賴的成份</p>\n<p>控制反轉把原本A對B直接控制權移交給由第三方容器</p>\n<p>降低A對B物件的耦合程度，並讓雙方都倚賴抽象。</p>\n<blockquote>\n<p>IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”</p>\n</blockquote>\n<blockquote>\n<p>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。</p>\n</blockquote>\n<hr>\n<p>DI—Dependency Injection 依賴注入</p>\n<p>把<strong>被依賴物件</strong>注入<strong>被動接收物件</strong>中</p>\n<p>案例解釋：</p>\n<p>小明是個愛乾淨的人，但他工作時常加班導致房間雜亂，他不能忍受此狀況，所以小明去找一個清潔阿姨每天幫忙他打掃家裡</p>\n<p>哪天阿姨哪天有事不能打掃，小明就必須要再去找人來幫忙打掃，由此可知小明耦合阿姨</p>\n<hr>\n<p>如果今天是….</p>\n<p>小明把他要的條件給「打掃仲介公司」，仲介公司幫他尋找有沒有符合小明需求的打掃阿姨，假如今天A阿姨請假了，仲介公司會自動找另一個符合需求B阿姨幫忙打掃…</p>\n<p>原本小明需耦合於打掃阿姨，現在被「仲介公司」做了控制反轉讓「仲介公司」來提供打掃阿姨。</p>\n<p>小明不用管是否今天有人會來打掃，「仲介公司」會幫小明找到一個掃地阿姨。</p>\n<ul>\n<li>「仲介公司」可看作 依賴注入容器</li>\n<li>「小明」可看作 被動接收物件</li>\n</ul>\n<p>「打掃阿姨」可看作 被依賴物件</p>\n<p>在使用IOC容器前需先了解雙方的依賴關係(誰依賴誰?)</p>\n<p>上述還有一個很重要的觀念是，依賴和被接收對象要倚賴抽象。</p>\n<hr>\n<p>範例使用：VS2015</p>\n<p>IOC容器：AutoFac</p>\n<p>下面範例來說明上面的例子</p>\n<p>小明自己依賴於掃地阿姨<br>依賴程式碼寫在小明類別內部日後要更改只能動內部程式碼。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// 小明直接依賴 Aunt 不是依賴抽象</span><br><span class=\"line\">/// 日後要改必須動內部</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">public class Mine</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public Aunt aunt = new Aunt();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Room()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aunt.Swapping();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>呼叫使用時</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mine mine = new Mine();</span><br><span class=\"line\">mine.Room();</span><br></pre></td></tr></table></figure>\n<p>小明找仲介公司</p>\n<p><strong>仲介公司(Ioc容器)</strong></p>\n<p>在仲介公司內註冊需求，讓仲介公司日後幫你找人（註冊的類別）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// 仲介公司</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">private static IContainer MiddleCompany()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ContainerBuilder builder = new ContainerBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    //在仲介公司裡寫需求人申請單</span><br><span class=\"line\">    builder.RegisterType&lt;MineWithMiddle&gt;();</span><br><span class=\"line\">    //小明所需打掃阿姨需求</span><br><span class=\"line\">    builder.RegisterType&lt;Aunt&gt;().As&lt;ISwapable&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    return builder.Build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用起來</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IContainer middleCompany = MiddleCompany();</span><br><span class=\"line\">//仲介公司(IOC AutoFac)自動幫小明注入一個打掃阿姨</span><br><span class=\"line\">MineWithMiddle mineWithMiddle = middleCompany.Resolve&lt;MineWithMiddle&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">mineWithMiddle.Room();</span><br></pre></td></tr></table></figure>\n<p>總結：</p>\n<p>雖然上面程式碼執行結果一樣，但內部結構和日後擴展性卻截然不同</p>\n<blockquote>\n<p>重點：系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。</p>\n</blockquote>\n<p>像網頁瀏覽器和伺服器是依賴<strong>Http</strong>協議，用戶端不管是手機.電腦,平板，伺服器端php,asp.net,java都可互相交信，依賴<strong>Http</strong>協議共用的合約</p>\n<p><a href=\"https://github.com/isdaniel/IOC_Sample\" target=\"_blank\" rel=\"noopener\">範例原始碼</a></p>\n<p><a href=\"http://www.cnblogs.com/xdp-gacl/p/4249939.html\" target=\"_blank\" rel=\"noopener\">參考連結</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>IOC</code>是一個oop重要的程式設計思想。</p>\n<p>學一個技術或思想前我們先了解，這個技術或思想為我們解決怎樣問題。</p>\n<p><code>Ioc—Inversion of Control</code> 控制反轉<br>控制反轉是一個設計思想 ，把對於某個物件的控制權移轉給第三方容器</p>\n<h2 id=\"簡單解釋\"><a href=\"#簡單解釋\" class=\"headerlink\" title=\"簡單解釋\"></a>簡單解釋</h2><p>A物件程式內部需要使用B物件 A,B物件中有依賴的成份</p>\n<p>控制反轉是把原本A對B控制權移交給第三方容器</p>\n<p>降低A對B物件的耦合性，讓雙方都倚賴第三方容器。</p>\n<ul>\n<li>反轉概念如下圖</li>\n</ul>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/493ce9d9-64bd-4343-a145-16ab21f3c695/1555312814_72597.png\" alt=\"pic\"></p>\n<blockquote>\n<p>我們可發現有兩點差異</p>\n</blockquote>\n<ol>\n<li><p>使用者原本直接耦合於A，但使用IoC容器使用者就直接對容器而不是A 至於A關連於誰由容器決定<br>原本A直接控制於B,C，但透過一個IoC容器我們控制權反轉給了容器</p>\n</li>\n<li><p>IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”<br>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。<br>DI—Dependency Injection 依賴注入</p>\n</li>\n</ol>\n<blockquote>\n<p>把被依賴物件注入被動接收物件中</p>\n</blockquote>\n<h2 id=\"案例解釋：\"><a href=\"#案例解釋：\" class=\"headerlink\" title=\"案例解釋：\"></a>案例解釋：</h2><p>小明是個愛乾淨的人，但他工作時常加班導致</p>\n<p>學一個技術或思想前我們必須先了解，這個技術或思想可為我們解決什麼問題。</p>\n<p><code>Ioc(Inversion of Control)</code>控制反轉</p>\n<p><strong>控制反轉是一個設計思想</strong></p>\n<p>簡單解釋</p>\n<p>A物件程式內部需要使用B物件 A,B物件中有依賴的成份</p>\n<p>控制反轉把原本A對B直接控制權移交給由第三方容器</p>\n<p>降低A對B物件的耦合程度，並讓雙方都倚賴抽象。</p>\n<blockquote>\n<p>IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”</p>\n</blockquote>\n<blockquote>\n<p>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。</p>\n</blockquote>\n<hr>\n<p>DI—Dependency Injection 依賴注入</p>\n<p>把<strong>被依賴物件</strong>注入<strong>被動接收物件</strong>中</p>\n<p>案例解釋：</p>\n<p>小明是個愛乾淨的人，但他工作時常加班導致房間雜亂，他不能忍受此狀況，所以小明去找一個清潔阿姨每天幫忙他打掃家裡</p>\n<p>哪天阿姨哪天有事不能打掃，小明就必須要再去找人來幫忙打掃，由此可知小明耦合阿姨</p>\n<hr>\n<p>如果今天是….</p>\n<p>小明把他要的條件給「打掃仲介公司」，仲介公司幫他尋找有沒有符合小明需求的打掃阿姨，假如今天A阿姨請假了，仲介公司會自動找另一個符合需求B阿姨幫忙打掃…</p>\n<p>原本小明需耦合於打掃阿姨，現在被「仲介公司」做了控制反轉讓「仲介公司」來提供打掃阿姨。</p>\n<p>小明不用管是否今天有人會來打掃，「仲介公司」會幫小明找到一個掃地阿姨。</p>\n<ul>\n<li>「仲介公司」可看作 依賴注入容器</li>\n<li>「小明」可看作 被動接收物件</li>\n</ul>\n<p>「打掃阿姨」可看作 被依賴物件</p>\n<p>在使用IOC容器前需先了解雙方的依賴關係(誰依賴誰?)</p>\n<p>上述還有一個很重要的觀念是，依賴和被接收對象要倚賴抽象。</p>\n<hr>\n<p>範例使用：VS2015</p>\n<p>IOC容器：AutoFac</p>\n<p>下面範例來說明上面的例子</p>\n<p>小明自己依賴於掃地阿姨<br>依賴程式碼寫在小明類別內部日後要更改只能動內部程式碼。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// 小明直接依賴 Aunt 不是依賴抽象</span><br><span class=\"line\">/// 日後要改必須動內部</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">public class Mine</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public Aunt aunt = new Aunt();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Room()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aunt.Swapping();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>呼叫使用時</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mine mine = new Mine();</span><br><span class=\"line\">mine.Room();</span><br></pre></td></tr></table></figure>\n<p>小明找仲介公司</p>\n<p><strong>仲介公司(Ioc容器)</strong></p>\n<p>在仲介公司內註冊需求，讓仲介公司日後幫你找人（註冊的類別）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// 仲介公司</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">private static IContainer MiddleCompany()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ContainerBuilder builder = new ContainerBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    //在仲介公司裡寫需求人申請單</span><br><span class=\"line\">    builder.RegisterType&lt;MineWithMiddle&gt;();</span><br><span class=\"line\">    //小明所需打掃阿姨需求</span><br><span class=\"line\">    builder.RegisterType&lt;Aunt&gt;().As&lt;ISwapable&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    return builder.Build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用起來</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IContainer middleCompany = MiddleCompany();</span><br><span class=\"line\">//仲介公司(IOC AutoFac)自動幫小明注入一個打掃阿姨</span><br><span class=\"line\">MineWithMiddle mineWithMiddle = middleCompany.Resolve&lt;MineWithMiddle&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">mineWithMiddle.Room();</span><br></pre></td></tr></table></figure>\n<p>總結：</p>\n<p>雖然上面程式碼執行結果一樣，但內部結構和日後擴展性卻截然不同</p>\n<blockquote>\n<p>重點：系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。</p>\n</blockquote>\n<p>像網頁瀏覽器和伺服器是依賴<strong>Http</strong>協議，用戶端不管是手機.電腦,平板，伺服器端php,asp.net,java都可互相交信，依賴<strong>Http</strong>協議共用的合約</p>\n<p><a href=\"https://github.com/isdaniel/IOC_Sample\" target=\"_blank\" rel=\"noopener\">範例原始碼</a></p>\n<p><a href=\"http://www.cnblogs.com/xdp-gacl/p/4249939.html\" target=\"_blank\" rel=\"noopener\">參考連結</a></p>\n"},{"title":"JsonConvert.SerializeObject 呼叫 object.Equals 問題探討","date":"2019-05-26T14:40:46.000Z","_content":"\n最近在 StackOverFlow 解答一個很有趣的問題[Json.Net / Newtonsoft: Using JsonConvert.SerializeObject results in weird .Equals calls - why?](https://stackoverflow.com/questions/51669072/json-net-newtonsoft-using-jsonconvert-serializeobject-results-in-weird-equal/51670641#51670641)\n\n問題簡述是:\n\n使用`Newtonsoft.Json.JsonConvert.SerializeObject`方法 來把物件轉成`JSON`資料時,為什麼會呼叫物件的`Equals` 方法 且傳入的`object obj`類型不是此類別類型,而是屬性的類型\n\n以下是發問者提供的程式碼:\n\n``` c#\npublic class JsonTestClass\n{\n    public string Name { get; set; }\n    public List<int> MyIntList { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        if (obj == null)\n            return false;\n        JsonTestClass jtc = (JsonTestClass)obj;\n        return true;\n    }\n}\n\nJsonTestClass c = new JsonTestClass();\nc.Name = \"test\";\nc.MyIntList = new List<int>();\nc.MyIntList.Add(1);\n\nstring json = JsonConvert.SerializeObject(c, new JsonSerializerSettings() { TypeNameHandling = TypeNameHandling.All });\n```\n\n-----\n\n看到問題後我就直接去看[Json.net原始碼](https://github.com/JamesNK/Newtonsoft.Json) 一探到底原因出在哪邊.\n\n後面發現當我們在呼叫`JsonConvert.SerializeObject`方法,會執行一個 [private bool CheckForCircularReference](https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs)私有方法.\n\n``` c#\nbool exists = (Serializer._equalityComparer != null)\n                ? _serializeStack.Contains(value, Serializer._equalityComparer)\n                : _serializeStack.Contains(value);\n```\n\n這個方法主要用意是**判斷目前序列化JSON物件是否有重複引用本身**,方法中有段程式碼使用到 `List<T>.Contains`.\n\n當我們在呼叫`List<T>.Contains`時 預設`EqualityComparer<T>.Default` 進行比較來進行判斷是否存在集合中.\n\n要寫客製化比較方式有兩種\n1. 在.net中每個類別都繼承於`Object`, `Object` 中有`object.Equals` 所以可以重寫`object.Equals`方法.\n2. 將此類別實現 `IEquatable<T>` 並重寫你要的比較方式.\n\n所以會呼叫`object.Equals`是因為上段程式碼\n\n-----\n\n\n什麼是**判斷目前序列化JSON物件是否有重複引用本身**?\n\n以下的範例是[private bool CheckForCircularReference](https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs)想要防止的問題\n\n```c#\npublic class JsonTestClass\n{\n    public string Name { get; set; }\n    public List<int> MyIntList { get; set; }\n    public JsonTestClass Test{get;set;}\n}\n\nJsonTestClass c = new JsonTestClass();\nc.Name = \"test\";\nc.Test = c;\nstring json = JsonConvert.SerializeObject\n               (c, new JsonSerializerSettings() { TypeNameHandling = TypeNameHandling.All });\n```\n\n我們可以看到`c.Test = c;` 將自己本身付值給 `public JsonTestClass Test{get;set;}` 這個屬性.\n\n我們執行上面程式碼會得到此錯誤\n\n> Self referencing loop detected for property 'Test' with type 'Program+JsonTestClass'. Path ''.\n\n是因為他要防止重複引用本身導致無限迴圈解析`JSON`.\n\n## Note\n\n**預設**值類型的比較是比較值.\n**預設**參考類別比較的是地址.","source":"_posts/JsonConvert-SerializeObject.md","raw":"---\ntitle: JsonConvert.SerializeObject 呼叫 object.Equals 問題探討\ndate: 2019-05-26 22:40:46\ntags: [C#,IOC,Json.net]\n---\n\n最近在 StackOverFlow 解答一個很有趣的問題[Json.Net / Newtonsoft: Using JsonConvert.SerializeObject results in weird .Equals calls - why?](https://stackoverflow.com/questions/51669072/json-net-newtonsoft-using-jsonconvert-serializeobject-results-in-weird-equal/51670641#51670641)\n\n問題簡述是:\n\n使用`Newtonsoft.Json.JsonConvert.SerializeObject`方法 來把物件轉成`JSON`資料時,為什麼會呼叫物件的`Equals` 方法 且傳入的`object obj`類型不是此類別類型,而是屬性的類型\n\n以下是發問者提供的程式碼:\n\n``` c#\npublic class JsonTestClass\n{\n    public string Name { get; set; }\n    public List<int> MyIntList { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        if (obj == null)\n            return false;\n        JsonTestClass jtc = (JsonTestClass)obj;\n        return true;\n    }\n}\n\nJsonTestClass c = new JsonTestClass();\nc.Name = \"test\";\nc.MyIntList = new List<int>();\nc.MyIntList.Add(1);\n\nstring json = JsonConvert.SerializeObject(c, new JsonSerializerSettings() { TypeNameHandling = TypeNameHandling.All });\n```\n\n-----\n\n看到問題後我就直接去看[Json.net原始碼](https://github.com/JamesNK/Newtonsoft.Json) 一探到底原因出在哪邊.\n\n後面發現當我們在呼叫`JsonConvert.SerializeObject`方法,會執行一個 [private bool CheckForCircularReference](https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs)私有方法.\n\n``` c#\nbool exists = (Serializer._equalityComparer != null)\n                ? _serializeStack.Contains(value, Serializer._equalityComparer)\n                : _serializeStack.Contains(value);\n```\n\n這個方法主要用意是**判斷目前序列化JSON物件是否有重複引用本身**,方法中有段程式碼使用到 `List<T>.Contains`.\n\n當我們在呼叫`List<T>.Contains`時 預設`EqualityComparer<T>.Default` 進行比較來進行判斷是否存在集合中.\n\n要寫客製化比較方式有兩種\n1. 在.net中每個類別都繼承於`Object`, `Object` 中有`object.Equals` 所以可以重寫`object.Equals`方法.\n2. 將此類別實現 `IEquatable<T>` 並重寫你要的比較方式.\n\n所以會呼叫`object.Equals`是因為上段程式碼\n\n-----\n\n\n什麼是**判斷目前序列化JSON物件是否有重複引用本身**?\n\n以下的範例是[private bool CheckForCircularReference](https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs)想要防止的問題\n\n```c#\npublic class JsonTestClass\n{\n    public string Name { get; set; }\n    public List<int> MyIntList { get; set; }\n    public JsonTestClass Test{get;set;}\n}\n\nJsonTestClass c = new JsonTestClass();\nc.Name = \"test\";\nc.Test = c;\nstring json = JsonConvert.SerializeObject\n               (c, new JsonSerializerSettings() { TypeNameHandling = TypeNameHandling.All });\n```\n\n我們可以看到`c.Test = c;` 將自己本身付值給 `public JsonTestClass Test{get;set;}` 這個屬性.\n\n我們執行上面程式碼會得到此錯誤\n\n> Self referencing loop detected for property 'Test' with type 'Program+JsonTestClass'. Path ''.\n\n是因為他要防止重複引用本身導致無限迴圈解析`JSON`.\n\n## Note\n\n**預設**值類型的比較是比較值.\n**預設**參考類別比較的是地址.","slug":"JsonConvert-SerializeObject","published":1,"updated":"2019-05-27T03:19:00.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5ubhsp00058cedvg0932eo","content":"<p>最近在 StackOverFlow 解答一個很有趣的問題<a href=\"https://stackoverflow.com/questions/51669072/json-net-newtonsoft-using-jsonconvert-serializeobject-results-in-weird-equal/51670641#51670641\" target=\"_blank\" rel=\"noopener\">Json.Net / Newtonsoft: Using JsonConvert.SerializeObject results in weird .Equals calls - why?</a></p>\n<p>問題簡述是:</p>\n<p>使用<code>Newtonsoft.Json.JsonConvert.SerializeObject</code>方法 來把物件轉成<code>JSON</code>資料時,為什麼會呼叫物件的<code>Equals</code> 方法 且傳入的<code>object obj</code>類型不是此類別類型,而是屬性的類型</p>\n<p>以下是發問者提供的程式碼:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JsonTestClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string Name &#123; get; set; &#125;</span><br><span class=\"line\">    public List&lt;int&gt; MyIntList &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override bool Equals(object obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (obj == null)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        JsonTestClass jtc = (JsonTestClass)obj;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonTestClass c = new JsonTestClass();</span><br><span class=\"line\">c.Name = &quot;test&quot;;</span><br><span class=\"line\">c.MyIntList = new List&lt;int&gt;();</span><br><span class=\"line\">c.MyIntList.Add(1);</span><br><span class=\"line\"></span><br><span class=\"line\">string json = JsonConvert.SerializeObject(c, new JsonSerializerSettings() &#123; TypeNameHandling = TypeNameHandling.All &#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>看到問題後我就直接去看<a href=\"https://github.com/JamesNK/Newtonsoft.Json\" target=\"_blank\" rel=\"noopener\">Json.net原始碼</a> 一探到底原因出在哪邊.</p>\n<p>後面發現當我們在呼叫<code>JsonConvert.SerializeObject</code>方法,會執行一個 <a href=\"https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs\" target=\"_blank\" rel=\"noopener\">private bool CheckForCircularReference</a>私有方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool exists = (Serializer._equalityComparer != null)</span><br><span class=\"line\">                ? _serializeStack.Contains(value, Serializer._equalityComparer)</span><br><span class=\"line\">                : _serializeStack.Contains(value);</span><br></pre></td></tr></table></figure>\n<p>這個方法主要用意是<strong>判斷目前序列化JSON物件是否有重複引用本身</strong>,方法中有段程式碼使用到 <code>List&lt;T&gt;.Contains</code>.</p>\n<p>當我們在呼叫<code>List&lt;T&gt;.Contains</code>時 預設<code>EqualityComparer&lt;T&gt;.Default</code> 進行比較來進行判斷是否存在集合中.</p>\n<p>要寫客製化比較方式有兩種</p>\n<ol>\n<li>在.net中每個類別都繼承於<code>Object</code>, <code>Object</code> 中有<code>object.Equals</code> 所以可以重寫<code>object.Equals</code>方法.</li>\n<li>將此類別實現 <code>IEquatable&lt;T&gt;</code> 並重寫你要的比較方式.</li>\n</ol>\n<p>所以會呼叫<code>object.Equals</code>是因為上段程式碼</p>\n<hr>\n<p>什麼是<strong>判斷目前序列化JSON物件是否有重複引用本身</strong>?</p>\n<p>以下的範例是<a href=\"https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs\" target=\"_blank\" rel=\"noopener\">private bool CheckForCircularReference</a>想要防止的問題</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JsonTestClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string Name &#123; get; set; &#125;</span><br><span class=\"line\">    public List&lt;int&gt; MyIntList &#123; get; set; &#125;</span><br><span class=\"line\">    public JsonTestClass Test&#123;get;set;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonTestClass c = new JsonTestClass();</span><br><span class=\"line\">c.Name = &quot;test&quot;;</span><br><span class=\"line\">c.Test = c;</span><br><span class=\"line\">string json = JsonConvert.SerializeObject</span><br><span class=\"line\">               (c, new JsonSerializerSettings() &#123; TypeNameHandling = TypeNameHandling.All &#125;);</span><br></pre></td></tr></table></figure>\n<p>我們可以看到<code>c.Test = c;</code> 將自己本身付值給 <code>public JsonTestClass Test{get;set;}</code> 這個屬性.</p>\n<p>我們執行上面程式碼會得到此錯誤</p>\n<blockquote>\n<p>Self referencing loop detected for property ‘Test’ with type ‘Program+JsonTestClass’. Path ‘’.</p>\n</blockquote>\n<p>是因為他要防止重複引用本身導致無限迴圈解析<code>JSON</code>.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p><strong>預設</strong>值類型的比較是比較值.<br><strong>預設</strong>參考類別比較的是地址.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在 StackOverFlow 解答一個很有趣的問題<a href=\"https://stackoverflow.com/questions/51669072/json-net-newtonsoft-using-jsonconvert-serializeobject-results-in-weird-equal/51670641#51670641\" target=\"_blank\" rel=\"noopener\">Json.Net / Newtonsoft: Using JsonConvert.SerializeObject results in weird .Equals calls - why?</a></p>\n<p>問題簡述是:</p>\n<p>使用<code>Newtonsoft.Json.JsonConvert.SerializeObject</code>方法 來把物件轉成<code>JSON</code>資料時,為什麼會呼叫物件的<code>Equals</code> 方法 且傳入的<code>object obj</code>類型不是此類別類型,而是屬性的類型</p>\n<p>以下是發問者提供的程式碼:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JsonTestClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string Name &#123; get; set; &#125;</span><br><span class=\"line\">    public List&lt;int&gt; MyIntList &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override bool Equals(object obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (obj == null)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        JsonTestClass jtc = (JsonTestClass)obj;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonTestClass c = new JsonTestClass();</span><br><span class=\"line\">c.Name = &quot;test&quot;;</span><br><span class=\"line\">c.MyIntList = new List&lt;int&gt;();</span><br><span class=\"line\">c.MyIntList.Add(1);</span><br><span class=\"line\"></span><br><span class=\"line\">string json = JsonConvert.SerializeObject(c, new JsonSerializerSettings() &#123; TypeNameHandling = TypeNameHandling.All &#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>看到問題後我就直接去看<a href=\"https://github.com/JamesNK/Newtonsoft.Json\" target=\"_blank\" rel=\"noopener\">Json.net原始碼</a> 一探到底原因出在哪邊.</p>\n<p>後面發現當我們在呼叫<code>JsonConvert.SerializeObject</code>方法,會執行一個 <a href=\"https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs\" target=\"_blank\" rel=\"noopener\">private bool CheckForCircularReference</a>私有方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool exists = (Serializer._equalityComparer != null)</span><br><span class=\"line\">                ? _serializeStack.Contains(value, Serializer._equalityComparer)</span><br><span class=\"line\">                : _serializeStack.Contains(value);</span><br></pre></td></tr></table></figure>\n<p>這個方法主要用意是<strong>判斷目前序列化JSON物件是否有重複引用本身</strong>,方法中有段程式碼使用到 <code>List&lt;T&gt;.Contains</code>.</p>\n<p>當我們在呼叫<code>List&lt;T&gt;.Contains</code>時 預設<code>EqualityComparer&lt;T&gt;.Default</code> 進行比較來進行判斷是否存在集合中.</p>\n<p>要寫客製化比較方式有兩種</p>\n<ol>\n<li>在.net中每個類別都繼承於<code>Object</code>, <code>Object</code> 中有<code>object.Equals</code> 所以可以重寫<code>object.Equals</code>方法.</li>\n<li>將此類別實現 <code>IEquatable&lt;T&gt;</code> 並重寫你要的比較方式.</li>\n</ol>\n<p>所以會呼叫<code>object.Equals</code>是因為上段程式碼</p>\n<hr>\n<p>什麼是<strong>判斷目前序列化JSON物件是否有重複引用本身</strong>?</p>\n<p>以下的範例是<a href=\"https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs\" target=\"_blank\" rel=\"noopener\">private bool CheckForCircularReference</a>想要防止的問題</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JsonTestClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string Name &#123; get; set; &#125;</span><br><span class=\"line\">    public List&lt;int&gt; MyIntList &#123; get; set; &#125;</span><br><span class=\"line\">    public JsonTestClass Test&#123;get;set;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonTestClass c = new JsonTestClass();</span><br><span class=\"line\">c.Name = &quot;test&quot;;</span><br><span class=\"line\">c.Test = c;</span><br><span class=\"line\">string json = JsonConvert.SerializeObject</span><br><span class=\"line\">               (c, new JsonSerializerSettings() &#123; TypeNameHandling = TypeNameHandling.All &#125;);</span><br></pre></td></tr></table></figure>\n<p>我們可以看到<code>c.Test = c;</code> 將自己本身付值給 <code>public JsonTestClass Test{get;set;}</code> 這個屬性.</p>\n<p>我們執行上面程式碼會得到此錯誤</p>\n<blockquote>\n<p>Self referencing loop detected for property ‘Test’ with type ‘Program+JsonTestClass’. Path ‘’.</p>\n</blockquote>\n<p>是因為他要防止重複引用本身導致無限迴圈解析<code>JSON</code>.</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p><strong>預設</strong>值類型的比較是比較值.<br><strong>預設</strong>參考類別比較的是地址.</p>\n"},{"title":"Asp.net使用快取 (一)","date":"2019-05-27T00:26:31.000Z","_content":"\n最近回答[SQL Server data caching in ASP.NET](https://stackoverflow.com/questions/51160978/sql-server-data-caching-in-asp-net/51161277#51161277)問題,且有人問我有關快取的問題.\n\n所以小弟打算寫兩篇文章簡單分享我知道的*快取*\n\n-----\n**目錄:**\n\n第一篇 \n* 為何要使用快取\n* 快取操作\n* Asp.Net中使用快取 by `HttpRuntime.Cache`\n\n第二篇 \n* 提出介面,提高可替換性\n* 使用**泛型**改寫快取 讀取方式\n* 使用**擴充方法**改寫快取\n\n\n-----\n\n**正文**\n\n快取機制很重要,但有些觀念可能要先釐清楚\n\n1.為何要使用快取\n\n在使用一個東西前,使用的原因很重要.\n\n如果某些資料**常常使用**,但卻**不常改變**我們會把資料存在某個空間中(常常會存記憶體,因為記憶體速度快),方便日後讀取使用.\n\n2.快取操作\n\n一般使用快取會有兩個動作,讀和寫\n如果是存在記憶體中一般會有期限,因為記憶體資源很寶貴不能一直占用.\n\n* 寫入\n\n通常有一個**Key**,跟要存入**物件**\n就像我們把東西存入保險箱,會拿到一個鑰匙 來取東西\n\n* 讀取\n\n讀取就是依照Key讀取我們存入的物件\n\n就像我們要拿保險箱裡的東西需要的鑰匙\n\n1. Asp.Net中使用快取 by `HttpRuntime.Cache`\n\n在Asp.net中 有一個靜態物件  `HttpRuntime.Cache` 可以很方便使用快取\n\n* 存入快取可以呼叫 `Insert` 方法\n\n他有多個重載 可以使用最簡單的 `Insert(string [key],object [value])`\n\n如下面範例\n\n``` c#\nSystem.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;\nstring data = \"\";\ncacheContainer.Insert(\"test1\", data);\n```\n\n* 讀取快取資料\n\n呼叫 `Get` 傳入Key值即可獲得  Note:如果快取容器沒有此物件會回傳`NULL`\n\n```c#\nstring cacheData = cacheContainer.Get(\"data\") as string;\n```\n\n小結:這篇簡單介紹快取 下篇會將目前程式碼做改進,變得更優美彈性\n\n","source":"_posts/cache-asp-net-1.md","raw":"---\ntitle: Asp.net使用快取 (一)\ndate: 2019-05-27 08:26:31\ntags: [C#,Asp.net,cache]\n---\n\n最近回答[SQL Server data caching in ASP.NET](https://stackoverflow.com/questions/51160978/sql-server-data-caching-in-asp-net/51161277#51161277)問題,且有人問我有關快取的問題.\n\n所以小弟打算寫兩篇文章簡單分享我知道的*快取*\n\n-----\n**目錄:**\n\n第一篇 \n* 為何要使用快取\n* 快取操作\n* Asp.Net中使用快取 by `HttpRuntime.Cache`\n\n第二篇 \n* 提出介面,提高可替換性\n* 使用**泛型**改寫快取 讀取方式\n* 使用**擴充方法**改寫快取\n\n\n-----\n\n**正文**\n\n快取機制很重要,但有些觀念可能要先釐清楚\n\n1.為何要使用快取\n\n在使用一個東西前,使用的原因很重要.\n\n如果某些資料**常常使用**,但卻**不常改變**我們會把資料存在某個空間中(常常會存記憶體,因為記憶體速度快),方便日後讀取使用.\n\n2.快取操作\n\n一般使用快取會有兩個動作,讀和寫\n如果是存在記憶體中一般會有期限,因為記憶體資源很寶貴不能一直占用.\n\n* 寫入\n\n通常有一個**Key**,跟要存入**物件**\n就像我們把東西存入保險箱,會拿到一個鑰匙 來取東西\n\n* 讀取\n\n讀取就是依照Key讀取我們存入的物件\n\n就像我們要拿保險箱裡的東西需要的鑰匙\n\n1. Asp.Net中使用快取 by `HttpRuntime.Cache`\n\n在Asp.net中 有一個靜態物件  `HttpRuntime.Cache` 可以很方便使用快取\n\n* 存入快取可以呼叫 `Insert` 方法\n\n他有多個重載 可以使用最簡單的 `Insert(string [key],object [value])`\n\n如下面範例\n\n``` c#\nSystem.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;\nstring data = \"\";\ncacheContainer.Insert(\"test1\", data);\n```\n\n* 讀取快取資料\n\n呼叫 `Get` 傳入Key值即可獲得  Note:如果快取容器沒有此物件會回傳`NULL`\n\n```c#\nstring cacheData = cacheContainer.Get(\"data\") as string;\n```\n\n小結:這篇簡單介紹快取 下篇會將目前程式碼做改進,變得更優美彈性\n\n","slug":"cache-asp-net-1","published":1,"updated":"2019-05-27T03:19:00.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5ubhsq00068cedx7sohi83","content":"<p>最近回答<a href=\"https://stackoverflow.com/questions/51160978/sql-server-data-caching-in-asp-net/51161277#51161277\" target=\"_blank\" rel=\"noopener\">SQL Server data caching in ASP.NET</a>問題,且有人問我有關快取的問題.</p>\n<p>所以小弟打算寫兩篇文章簡單分享我知道的<em>快取</em></p>\n<hr>\n<p><strong>目錄:</strong></p>\n<p>第一篇 </p>\n<ul>\n<li>為何要使用快取</li>\n<li>快取操作</li>\n<li>Asp.Net中使用快取 by <code>HttpRuntime.Cache</code></li>\n</ul>\n<p>第二篇 </p>\n<ul>\n<li>提出介面,提高可替換性</li>\n<li>使用<strong>泛型</strong>改寫快取 讀取方式</li>\n<li>使用<strong>擴充方法</strong>改寫快取</li>\n</ul>\n<hr>\n<p><strong>正文</strong></p>\n<p>快取機制很重要,但有些觀念可能要先釐清楚</p>\n<p>1.為何要使用快取</p>\n<p>在使用一個東西前,使用的原因很重要.</p>\n<p>如果某些資料<strong>常常使用</strong>,但卻<strong>不常改變</strong>我們會把資料存在某個空間中(常常會存記憶體,因為記憶體速度快),方便日後讀取使用.</p>\n<p>2.快取操作</p>\n<p>一般使用快取會有兩個動作,讀和寫<br>如果是存在記憶體中一般會有期限,因為記憶體資源很寶貴不能一直占用.</p>\n<ul>\n<li>寫入</li>\n</ul>\n<p>通常有一個<strong>Key</strong>,跟要存入<strong>物件</strong><br>就像我們把東西存入保險箱,會拿到一個鑰匙 來取東西</p>\n<ul>\n<li>讀取</li>\n</ul>\n<p>讀取就是依照Key讀取我們存入的物件</p>\n<p>就像我們要拿保險箱裡的東西需要的鑰匙</p>\n<ol>\n<li>Asp.Net中使用快取 by <code>HttpRuntime.Cache</code></li>\n</ol>\n<p>在Asp.net中 有一個靜態物件  <code>HttpRuntime.Cache</code> 可以很方便使用快取</p>\n<ul>\n<li>存入快取可以呼叫 <code>Insert</code> 方法</li>\n</ul>\n<p>他有多個重載 可以使用最簡單的 <code>Insert(string [key],object [value])</code></p>\n<p>如下面範例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span><br><span class=\"line\">string data = &quot;&quot;;</span><br><span class=\"line\">cacheContainer.Insert(&quot;test1&quot;, data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>讀取快取資料</li>\n</ul>\n<p>呼叫 <code>Get</code> 傳入Key值即可獲得  Note:如果快取容器沒有此物件會回傳<code>NULL</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string cacheData = cacheContainer.Get(&quot;data&quot;) as string;</span><br></pre></td></tr></table></figure>\n<p>小結:這篇簡單介紹快取 下篇會將目前程式碼做改進,變得更優美彈性</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近回答<a href=\"https://stackoverflow.com/questions/51160978/sql-server-data-caching-in-asp-net/51161277#51161277\" target=\"_blank\" rel=\"noopener\">SQL Server data caching in ASP.NET</a>問題,且有人問我有關快取的問題.</p>\n<p>所以小弟打算寫兩篇文章簡單分享我知道的<em>快取</em></p>\n<hr>\n<p><strong>目錄:</strong></p>\n<p>第一篇 </p>\n<ul>\n<li>為何要使用快取</li>\n<li>快取操作</li>\n<li>Asp.Net中使用快取 by <code>HttpRuntime.Cache</code></li>\n</ul>\n<p>第二篇 </p>\n<ul>\n<li>提出介面,提高可替換性</li>\n<li>使用<strong>泛型</strong>改寫快取 讀取方式</li>\n<li>使用<strong>擴充方法</strong>改寫快取</li>\n</ul>\n<hr>\n<p><strong>正文</strong></p>\n<p>快取機制很重要,但有些觀念可能要先釐清楚</p>\n<p>1.為何要使用快取</p>\n<p>在使用一個東西前,使用的原因很重要.</p>\n<p>如果某些資料<strong>常常使用</strong>,但卻<strong>不常改變</strong>我們會把資料存在某個空間中(常常會存記憶體,因為記憶體速度快),方便日後讀取使用.</p>\n<p>2.快取操作</p>\n<p>一般使用快取會有兩個動作,讀和寫<br>如果是存在記憶體中一般會有期限,因為記憶體資源很寶貴不能一直占用.</p>\n<ul>\n<li>寫入</li>\n</ul>\n<p>通常有一個<strong>Key</strong>,跟要存入<strong>物件</strong><br>就像我們把東西存入保險箱,會拿到一個鑰匙 來取東西</p>\n<ul>\n<li>讀取</li>\n</ul>\n<p>讀取就是依照Key讀取我們存入的物件</p>\n<p>就像我們要拿保險箱裡的東西需要的鑰匙</p>\n<ol>\n<li>Asp.Net中使用快取 by <code>HttpRuntime.Cache</code></li>\n</ol>\n<p>在Asp.net中 有一個靜態物件  <code>HttpRuntime.Cache</code> 可以很方便使用快取</p>\n<ul>\n<li>存入快取可以呼叫 <code>Insert</code> 方法</li>\n</ul>\n<p>他有多個重載 可以使用最簡單的 <code>Insert(string [key],object [value])</code></p>\n<p>如下面範例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span><br><span class=\"line\">string data = &quot;&quot;;</span><br><span class=\"line\">cacheContainer.Insert(&quot;test1&quot;, data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>讀取快取資料</li>\n</ul>\n<p>呼叫 <code>Get</code> 傳入Key值即可獲得  Note:如果快取容器沒有此物件會回傳<code>NULL</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string cacheData = cacheContainer.Get(&quot;data&quot;) as string;</span><br></pre></td></tr></table></figure>\n<p>小結:這篇簡單介紹快取 下篇會將目前程式碼做改進,變得更優美彈性</p>\n"},{"title":"沒有Source Code 如何修改程式??","date":"2019-05-23T11:42:00.000Z","_content":"某些專案因為歷史久遠沒有Source Code,但有個需求需要異動裡面的程式該怎麼辦??\n\n難道只能整個反組譯,查看程式碼翻一份做新的嗎?\n\n不~~其實有辦法直接對於DLL進行修改\n\n只需使用  [Reflexil](https://github.com/sailro/Reflexil) 搭配 [ILSpy](https://github.com/icsharpcode/ILSpy) 或其他支援的反組譯軟體 \n\n\n> Reflexil 是一個組譯編輯器插件目前支援 Reflector, ILSpy 和 Telerik's JustDecompile.\n\n下載連結\n\n[Reflexil Release 2.2](https://github.com/sailro/Reflexil/releases/tag/v2.2) 搭配 [ILSpy version 3.2](https://github.com/icsharpcode/ILSpy/releases/tag/v3.2.0) \n\n# 前置動作，安裝\n\n## Reflexil 下載\n\n下載 `reflexil.for.ILSpy.2.2.bin.zip`，不用下載`AIO`\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445075_84536.png)\n\n作者有說\n\n> ILSpy version 3.2 (ILSpy 4 is not currently compatible with Reflexil, given the use of System.Reflection.Metadata, deprecating Mono.Cecil usage)\nILSpy 4 當前版本 ILSpy.2.2 並不支援\n\n## ILSpy 3.2 下載\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445185_3282.png)\n\n下載完後就把全部的DLL放在同一個資料夾下,並開啟 `ILSpy.exe`\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445435_24298.png)\n\n按下上方的齒輪UI 就可獲得下方藍色的Reflexil 修改框框.\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445493_79646.png)\n\n-----\n\n# 組件修改\n \n\n## 需求\n\n> 目前組件 有個ClassA 類別,裡面有一個prop1屬性 型態是string, 我們希望在這新增另一個屬性\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446072_21457.png)\n\n\n使用滑鼠右鍵點擊類別`ClassA`,我們可以看到很多方式可以注入新的程式碼\n\n在這我們選擇`inject property`. \n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446266_25885.png)\n\n\n我們需要修改的是\n\n* Item Name (使用屬性的名稱)\n* Property Type(使用屬性類別)\n* \n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446422_66604.png)\n\n\n選擇完後按下OK,我們就會發現`prop2`新屬性會出現在`ClassA`中.\n\n> 新增完後不代表已經將修改儲存!!\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446504_58205.png)\n\n我們需要點選組件，之後再按下`Save AS` 把本次修改儲存\n\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446789_43637.png)\n\n日後我們就可以使用新的屬性在我們程式中了!!\n\n### 小結\n\n此插件還可以新增,插入許多東西時屬非常強大,有興趣的玩家可再自行深入琢磨.\n\n\n","source":"_posts/modify-sourcecode.md","raw":"---\ntitle: 沒有Source Code 如何修改程式??\ndate: 2019-05-23 19:42:00\ntags: [C#,Reflection,Assembly]\n---\n某些專案因為歷史久遠沒有Source Code,但有個需求需要異動裡面的程式該怎麼辦??\n\n難道只能整個反組譯,查看程式碼翻一份做新的嗎?\n\n不~~其實有辦法直接對於DLL進行修改\n\n只需使用  [Reflexil](https://github.com/sailro/Reflexil) 搭配 [ILSpy](https://github.com/icsharpcode/ILSpy) 或其他支援的反組譯軟體 \n\n\n> Reflexil 是一個組譯編輯器插件目前支援 Reflector, ILSpy 和 Telerik's JustDecompile.\n\n下載連結\n\n[Reflexil Release 2.2](https://github.com/sailro/Reflexil/releases/tag/v2.2) 搭配 [ILSpy version 3.2](https://github.com/icsharpcode/ILSpy/releases/tag/v3.2.0) \n\n# 前置動作，安裝\n\n## Reflexil 下載\n\n下載 `reflexil.for.ILSpy.2.2.bin.zip`，不用下載`AIO`\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445075_84536.png)\n\n作者有說\n\n> ILSpy version 3.2 (ILSpy 4 is not currently compatible with Reflexil, given the use of System.Reflection.Metadata, deprecating Mono.Cecil usage)\nILSpy 4 當前版本 ILSpy.2.2 並不支援\n\n## ILSpy 3.2 下載\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445185_3282.png)\n\n下載完後就把全部的DLL放在同一個資料夾下,並開啟 `ILSpy.exe`\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445435_24298.png)\n\n按下上方的齒輪UI 就可獲得下方藍色的Reflexil 修改框框.\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445493_79646.png)\n\n-----\n\n# 組件修改\n \n\n## 需求\n\n> 目前組件 有個ClassA 類別,裡面有一個prop1屬性 型態是string, 我們希望在這新增另一個屬性\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446072_21457.png)\n\n\n使用滑鼠右鍵點擊類別`ClassA`,我們可以看到很多方式可以注入新的程式碼\n\n在這我們選擇`inject property`. \n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446266_25885.png)\n\n\n我們需要修改的是\n\n* Item Name (使用屬性的名稱)\n* Property Type(使用屬性類別)\n* \n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446422_66604.png)\n\n\n選擇完後按下OK,我們就會發現`prop2`新屬性會出現在`ClassA`中.\n\n> 新增完後不代表已經將修改儲存!!\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446504_58205.png)\n\n我們需要點選組件，之後再按下`Save AS` 把本次修改儲存\n\n\n![](https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446789_43637.png)\n\n日後我們就可以使用新的屬性在我們程式中了!!\n\n### 小結\n\n此插件還可以新增,插入許多東西時屬非常強大,有興趣的玩家可再自行深入琢磨.\n\n\n","slug":"modify-sourcecode","published":1,"updated":"2019-05-23T11:46:02.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5ubhsr00078ced56ynxkwp","content":"<p>某些專案因為歷史久遠沒有Source Code,但有個需求需要異動裡面的程式該怎麼辦??</p>\n<p>難道只能整個反組譯,查看程式碼翻一份做新的嗎?</p>\n<p>不~~其實有辦法直接對於DLL進行修改</p>\n<p>只需使用  <a href=\"https://github.com/sailro/Reflexil\" target=\"_blank\" rel=\"noopener\">Reflexil</a> 搭配 <a href=\"https://github.com/icsharpcode/ILSpy\" target=\"_blank\" rel=\"noopener\">ILSpy</a> 或其他支援的反組譯軟體 </p>\n<blockquote>\n<p>Reflexil 是一個組譯編輯器插件目前支援 Reflector, ILSpy 和 Telerik’s JustDecompile.</p>\n</blockquote>\n<p>下載連結</p>\n<p><a href=\"https://github.com/sailro/Reflexil/releases/tag/v2.2\" target=\"_blank\" rel=\"noopener\">Reflexil Release 2.2</a> 搭配 <a href=\"https://github.com/icsharpcode/ILSpy/releases/tag/v3.2.0\" target=\"_blank\" rel=\"noopener\">ILSpy version 3.2</a> </p>\n<h1 id=\"前置動作，安裝\"><a href=\"#前置動作，安裝\" class=\"headerlink\" title=\"前置動作，安裝\"></a>前置動作，安裝</h1><h2 id=\"Reflexil-下載\"><a href=\"#Reflexil-下載\" class=\"headerlink\" title=\"Reflexil 下載\"></a>Reflexil 下載</h2><p>下載 <code>reflexil.for.ILSpy.2.2.bin.zip</code>，不用下載<code>AIO</code></p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445075_84536.png\" alt></p>\n<p>作者有說</p>\n<blockquote>\n<p>ILSpy version 3.2 (ILSpy 4 is not currently compatible with Reflexil, given the use of System.Reflection.Metadata, deprecating Mono.Cecil usage)<br>ILSpy 4 當前版本 ILSpy.2.2 並不支援</p>\n</blockquote>\n<h2 id=\"ILSpy-3-2-下載\"><a href=\"#ILSpy-3-2-下載\" class=\"headerlink\" title=\"ILSpy 3.2 下載\"></a>ILSpy 3.2 下載</h2><p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445185_3282.png\" alt></p>\n<p>下載完後就把全部的DLL放在同一個資料夾下,並開啟 <code>ILSpy.exe</code></p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445435_24298.png\" alt></p>\n<p>按下上方的齒輪UI 就可獲得下方藍色的Reflexil 修改框框.</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445493_79646.png\" alt></p>\n<hr>\n<h1 id=\"組件修改\"><a href=\"#組件修改\" class=\"headerlink\" title=\"組件修改\"></a>組件修改</h1><h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><blockquote>\n<p>目前組件 有個ClassA 類別,裡面有一個prop1屬性 型態是string, 我們希望在這新增另一個屬性</p>\n</blockquote>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446072_21457.png\" alt></p>\n<p>使用滑鼠右鍵點擊類別<code>ClassA</code>,我們可以看到很多方式可以注入新的程式碼</p>\n<p>在這我們選擇<code>inject property</code>. </p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446266_25885.png\" alt></p>\n<p>我們需要修改的是</p>\n<ul>\n<li>Item Name (使用屬性的名稱)</li>\n<li>Property Type(使用屬性類別)</li>\n<li><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446422_66604.png\" alt></li>\n</ul>\n<p>選擇完後按下OK,我們就會發現<code>prop2</code>新屬性會出現在<code>ClassA</code>中.</p>\n<blockquote>\n<p>新增完後不代表已經將修改儲存!!</p>\n</blockquote>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446504_58205.png\" alt></p>\n<p>我們需要點選組件，之後再按下<code>Save AS</code> 把本次修改儲存</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446789_43637.png\" alt></p>\n<p>日後我們就可以使用新的屬性在我們程式中了!!</p>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>此插件還可以新增,插入許多東西時屬非常強大,有興趣的玩家可再自行深入琢磨.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>某些專案因為歷史久遠沒有Source Code,但有個需求需要異動裡面的程式該怎麼辦??</p>\n<p>難道只能整個反組譯,查看程式碼翻一份做新的嗎?</p>\n<p>不~~其實有辦法直接對於DLL進行修改</p>\n<p>只需使用  <a href=\"https://github.com/sailro/Reflexil\" target=\"_blank\" rel=\"noopener\">Reflexil</a> 搭配 <a href=\"https://github.com/icsharpcode/ILSpy\" target=\"_blank\" rel=\"noopener\">ILSpy</a> 或其他支援的反組譯軟體 </p>\n<blockquote>\n<p>Reflexil 是一個組譯編輯器插件目前支援 Reflector, ILSpy 和 Telerik’s JustDecompile.</p>\n</blockquote>\n<p>下載連結</p>\n<p><a href=\"https://github.com/sailro/Reflexil/releases/tag/v2.2\" target=\"_blank\" rel=\"noopener\">Reflexil Release 2.2</a> 搭配 <a href=\"https://github.com/icsharpcode/ILSpy/releases/tag/v3.2.0\" target=\"_blank\" rel=\"noopener\">ILSpy version 3.2</a> </p>\n<h1 id=\"前置動作，安裝\"><a href=\"#前置動作，安裝\" class=\"headerlink\" title=\"前置動作，安裝\"></a>前置動作，安裝</h1><h2 id=\"Reflexil-下載\"><a href=\"#Reflexil-下載\" class=\"headerlink\" title=\"Reflexil 下載\"></a>Reflexil 下載</h2><p>下載 <code>reflexil.for.ILSpy.2.2.bin.zip</code>，不用下載<code>AIO</code></p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445075_84536.png\" alt></p>\n<p>作者有說</p>\n<blockquote>\n<p>ILSpy version 3.2 (ILSpy 4 is not currently compatible with Reflexil, given the use of System.Reflection.Metadata, deprecating Mono.Cecil usage)<br>ILSpy 4 當前版本 ILSpy.2.2 並不支援</p>\n</blockquote>\n<h2 id=\"ILSpy-3-2-下載\"><a href=\"#ILSpy-3-2-下載\" class=\"headerlink\" title=\"ILSpy 3.2 下載\"></a>ILSpy 3.2 下載</h2><p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445185_3282.png\" alt></p>\n<p>下載完後就把全部的DLL放在同一個資料夾下,並開啟 <code>ILSpy.exe</code></p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445435_24298.png\" alt></p>\n<p>按下上方的齒輪UI 就可獲得下方藍色的Reflexil 修改框框.</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445493_79646.png\" alt></p>\n<hr>\n<h1 id=\"組件修改\"><a href=\"#組件修改\" class=\"headerlink\" title=\"組件修改\"></a>組件修改</h1><h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><blockquote>\n<p>目前組件 有個ClassA 類別,裡面有一個prop1屬性 型態是string, 我們希望在這新增另一個屬性</p>\n</blockquote>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446072_21457.png\" alt></p>\n<p>使用滑鼠右鍵點擊類別<code>ClassA</code>,我們可以看到很多方式可以注入新的程式碼</p>\n<p>在這我們選擇<code>inject property</code>. </p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446266_25885.png\" alt></p>\n<p>我們需要修改的是</p>\n<ul>\n<li>Item Name (使用屬性的名稱)</li>\n<li>Property Type(使用屬性類別)</li>\n<li><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446422_66604.png\" alt></li>\n</ul>\n<p>選擇完後按下OK,我們就會發現<code>prop2</code>新屬性會出現在<code>ClassA</code>中.</p>\n<blockquote>\n<p>新增完後不代表已經將修改儲存!!</p>\n</blockquote>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446504_58205.png\" alt></p>\n<p>我們需要點選組件，之後再按下<code>Save AS</code> 把本次修改儲存</p>\n<p><img src=\"https://az787680.vo.msecnd.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446789_43637.png\" alt></p>\n<p>日後我們就可以使用新的屬性在我們程式中了!!</p>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>此插件還可以新增,插入許多東西時屬非常強大,有興趣的玩家可再自行深入琢磨.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjw5ubhsg00018ced3iu2hxuj","tag_id":"cjw5ubhsn00048cedvdtzaw0g","_id":"cjw5ubhsu000d8cedfqdj9qwa"},{"post_id":"cjw5ubhsg00018ced3iu2hxuj","tag_id":"cjw5ubhss00088ced33o7m5pp","_id":"cjw5ubhsu000e8cedvx2aemba"},{"post_id":"cjw5ubhsg00018ced3iu2hxuj","tag_id":"cjw5ubhss00098cedz8mf5s6a","_id":"cjw5ubhsv000g8ced3hsspqbq"},{"post_id":"cjw5ubhsg00018ced3iu2hxuj","tag_id":"cjw5ubhst000a8ced6ni1of3d","_id":"cjw5ubhsv000h8ced26gysj6z"},{"post_id":"cjw5ubhsg00018ced3iu2hxuj","tag_id":"cjw5ubhst000b8ced06h875dz","_id":"cjw5ubhsv000j8cedsie57ycl"},{"post_id":"cjw5ubhsl00038ced3w7xtxua","tag_id":"cjw5ubhsu000c8ced3shry1vc","_id":"cjw5ubhsx000m8ced8s05507m"},{"post_id":"cjw5ubhsl00038ced3w7xtxua","tag_id":"cjw5ubhsu000f8ced0yx97yhg","_id":"cjw5ubhsy000n8cedbsyi6pe9"},{"post_id":"cjw5ubhsl00038ced3w7xtxua","tag_id":"cjw5ubhsv000i8cedttq6tmv7","_id":"cjw5ubhsy000p8cedontk7ko5"},{"post_id":"cjw5ubhsl00038ced3w7xtxua","tag_id":"cjw5ubhsw000k8cedbplr152o","_id":"cjw5ubhsz000q8cedsuzur1eq"},{"post_id":"cjw5ubhsp00058cedvg0932eo","tag_id":"cjw5ubhsu000c8ced3shry1vc","_id":"cjw5ubht0000t8cedh3qukz17"},{"post_id":"cjw5ubhsp00058cedvg0932eo","tag_id":"cjw5ubhsu000f8ced0yx97yhg","_id":"cjw5ubht0000u8cedgjfp3hk8"},{"post_id":"cjw5ubhsp00058cedvg0932eo","tag_id":"cjw5ubhsz000r8cedzicub3fg","_id":"cjw5ubht0000w8cedxyut0xsv"},{"post_id":"cjw5ubhsq00068cedx7sohi83","tag_id":"cjw5ubhsu000c8ced3shry1vc","_id":"cjw5ubht1000z8cedk3u81azs"},{"post_id":"cjw5ubhsq00068cedx7sohi83","tag_id":"cjw5ubht0000v8cedlmjptube","_id":"cjw5ubht200108cedbzhzskgf"},{"post_id":"cjw5ubhsq00068cedx7sohi83","tag_id":"cjw5ubht1000x8cede8te6bzu","_id":"cjw5ubht200128cedvgi4xsjz"},{"post_id":"cjw5ubhsr00078ced56ynxkwp","tag_id":"cjw5ubhsu000c8ced3shry1vc","_id":"cjw5ubht300148ced5sa5x3wa"},{"post_id":"cjw5ubhsr00078ced56ynxkwp","tag_id":"cjw5ubht200118cedb5a7oz36","_id":"cjw5ubht300158ced0sxw08rm"},{"post_id":"cjw5ubhsr00078ced56ynxkwp","tag_id":"cjw5ubht200138cedi8e7pd0i","_id":"cjw5ubht300168ced5jdcenlq"}],"Tag":[{"name":"Base64","_id":"cjw5ubhsn00048cedvdtzaw0g"},{"name":"AES","_id":"cjw5ubhss00088ced33o7m5pp"},{"name":"SHA256","_id":"cjw5ubhss00098cedz8mf5s6a"},{"name":"Encoding","_id":"cjw5ubhst000a8ced6ni1of3d"},{"name":"Hash","_id":"cjw5ubhst000b8ced06h875dz"},{"name":"C#","_id":"cjw5ubhsu000c8ced3shry1vc"},{"name":"IOC","_id":"cjw5ubhsu000f8ced0yx97yhg"},{"name":"Autofac","_id":"cjw5ubhsv000i8cedttq6tmv7"},{"name":"Design-Pattern","_id":"cjw5ubhsw000k8cedbplr152o"},{"name":"Json.net","_id":"cjw5ubhsz000r8cedzicub3fg"},{"name":"Asp.net","_id":"cjw5ubht0000v8cedlmjptube"},{"name":"cache","_id":"cjw5ubht1000x8cede8te6bzu"},{"name":"Reflection","_id":"cjw5ubht200118cedb5a7oz36"},{"name":"Assembly","_id":"cjw5ubht200138cedi8e7pd0i"}]}}